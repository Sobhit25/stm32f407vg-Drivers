
stm32f407_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002230  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080023e0  080023e0  000123e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024b8  080024b8  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  080024b8  080024b8  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024b8  080024b8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024b8  080024b8  000124b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024bc  080024bc  000124bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080024c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000080  08002540  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08002540  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002a74  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000813  00000000  00000000  00022b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000210  00000000  00000000  00023338  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001b8  00000000  00000000  00023548  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003110  00000000  00000000  00023700  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001fe2  00000000  00000000  00026810  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000b349  00000000  00000000  000287f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00033b3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001248  00000000  00000000  00033bb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080023c8 	.word	0x080023c8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	080023c8 	.word	0x080023c8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <delay>:
#define MY_ADDR 0x61;

#define SLAVE_ADDR  0x68

void delay(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 80002a6:	2300      	movs	r3, #0
 80002a8:	607b      	str	r3, [r7, #4]
 80002aa:	e002      	b.n	80002b2 <delay+0x12>
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	3301      	adds	r3, #1
 80002b0:	607b      	str	r3, [r7, #4]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	4a04      	ldr	r2, [pc, #16]	; (80002c8 <delay+0x28>)
 80002b6:	4293      	cmp	r3, r2
 80002b8:	d9f8      	bls.n	80002ac <delay+0xc>
}
 80002ba:	bf00      	nop
 80002bc:	370c      	adds	r7, #12
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	0003d08f 	.word	0x0003d08f

080002cc <I2C1_GPIOInits>:
 * PB6-> SCL
 * PB7 -> SDA
 */

void I2C1_GPIOInits(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b084      	sub	sp, #16
 80002d0:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 80002d2:	4b0e      	ldr	r3, [pc, #56]	; (800030c <I2C1_GPIOInits+0x40>)
 80002d4:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002d6:	2302      	movs	r3, #2
 80002d8:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80002da:	2301      	movs	r3, #1
 80002dc:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002de:	2300      	movs	r3, #0
 80002e0:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80002e2:	2304      	movs	r3, #4
 80002e4:	737b      	strb	r3, [r7, #13]
	I2CPins. GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002e6:	2302      	movs	r3, #2
 80002e8:	72bb      	strb	r3, [r7, #10]

	//scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 80002ea:	2306      	movs	r3, #6
 80002ec:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	4618      	mov	r0, r3
 80002f2:	f000 f985 	bl	8000600 <GPIO_Init>


	//sda
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 80002f6:	2307      	movs	r3, #7
 80002f8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	4618      	mov	r0, r3
 80002fe:	f000 f97f 	bl	8000600 <GPIO_Init>


}
 8000302:	bf00      	nop
 8000304:	3710      	adds	r7, #16
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	40020400 	.word	0x40020400

08000310 <I2C1_Inits>:

void I2C1_Inits(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 8000314:	4b09      	ldr	r3, [pc, #36]	; (800033c <I2C1_Inits+0x2c>)
 8000316:	4a0a      	ldr	r2, [pc, #40]	; (8000340 <I2C1_Inits+0x30>)
 8000318:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 800031a:	4b08      	ldr	r3, [pc, #32]	; (800033c <I2C1_Inits+0x2c>)
 800031c:	2201      	movs	r2, #1
 800031e:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 8000320:	4b06      	ldr	r3, [pc, #24]	; (800033c <I2C1_Inits+0x2c>)
 8000322:	2261      	movs	r2, #97	; 0x61
 8000324:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000326:	4b05      	ldr	r3, [pc, #20]	; (800033c <I2C1_Inits+0x2c>)
 8000328:	2200      	movs	r2, #0
 800032a:	729a      	strb	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 800032c:	4b03      	ldr	r3, [pc, #12]	; (800033c <I2C1_Inits+0x2c>)
 800032e:	4a05      	ldr	r2, [pc, #20]	; (8000344 <I2C1_Inits+0x34>)
 8000330:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 8000332:	4802      	ldr	r0, [pc, #8]	; (800033c <I2C1_Inits+0x2c>)
 8000334:	f000 fbee 	bl	8000b14 <I2C_Init>

}
 8000338:	bf00      	nop
 800033a:	bd80      	pop	{r7, pc}
 800033c:	20000174 	.word	0x20000174
 8000340:	40005400 	.word	0x40005400
 8000344:	000186a0 	.word	0x000186a0

08000348 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b086      	sub	sp, #24
 800034c:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn,GpioLed;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 800034e:	4b13      	ldr	r3, [pc, #76]	; (800039c <GPIO_ButtonInit+0x54>)
 8000350:	60fb      	str	r3, [r7, #12]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000352:	2300      	movs	r3, #0
 8000354:	743b      	strb	r3, [r7, #16]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000356:	2300      	movs	r3, #0
 8000358:	747b      	strb	r3, [r7, #17]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800035a:	2302      	movs	r3, #2
 800035c:	74bb      	strb	r3, [r7, #18]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800035e:	2300      	movs	r3, #0
 8000360:	74fb      	strb	r3, [r7, #19]

	GPIO_Init(&GPIOBtn);
 8000362:	f107 030c 	add.w	r3, r7, #12
 8000366:	4618      	mov	r0, r3
 8000368:	f000 f94a 	bl	8000600 <GPIO_Init>

	//this is led gpio configuration
	GpioLed.pGPIOx = GPIOD;
 800036c:	4b0c      	ldr	r3, [pc, #48]	; (80003a0 <GPIO_ButtonInit+0x58>)
 800036e:	603b      	str	r3, [r7, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000370:	230c      	movs	r3, #12
 8000372:	713b      	strb	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000374:	2301      	movs	r3, #1
 8000376:	717b      	strb	r3, [r7, #5]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000378:	2302      	movs	r3, #2
 800037a:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 800037c:	2301      	movs	r3, #1
 800037e:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000380:	2300      	movs	r3, #0
 8000382:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOD,ENABLE);
 8000384:	2101      	movs	r1, #1
 8000386:	4806      	ldr	r0, [pc, #24]	; (80003a0 <GPIO_ButtonInit+0x58>)
 8000388:	f000 f8b4 	bl	80004f4 <GPIO_PeriClockControl>

	GPIO_Init(&GpioLed);
 800038c:	463b      	mov	r3, r7
 800038e:	4618      	mov	r0, r3
 8000390:	f000 f936 	bl	8000600 <GPIO_Init>

}
 8000394:	bf00      	nop
 8000396:	3718      	adds	r7, #24
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	40020000 	.word	0x40020000
 80003a0:	40020c00 	.word	0x40020c00

080003a4 <main>:


int main(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b084      	sub	sp, #16
 80003a8:	af02      	add	r7, sp, #8

	uint8_t CommandCode, len;


	initialise_monitor_handles();
 80003aa:	f001 ff93 	bl	80022d4 <initialise_monitor_handles>

	printf("Application is running\n");
 80003ae:	4820      	ldr	r0, [pc, #128]	; (8000430 <main+0x8c>)
 80003b0:	f000 fe8e 	bl	80010d0 <puts>


	GPIO_ButtonInit();
 80003b4:	f7ff ffc8 	bl	8000348 <GPIO_ButtonInit>

	//i2c pin inits
	I2C1_GPIOInits();
 80003b8:	f7ff ff88 	bl	80002cc <I2C1_GPIOInits>

	//i2c peripheral configuration
	I2C1_Inits();
 80003bc:	f7ff ffa8 	bl	8000310 <I2C1_Inits>

	//enable the i2c peripheral
	I2C_PeripheralControl(I2C1,ENABLE);
 80003c0:	2101      	movs	r1, #1
 80003c2:	481c      	ldr	r0, [pc, #112]	; (8000434 <main+0x90>)
 80003c4:	f000 fb51 	bl	8000a6a <I2C_PeripheralControl>

	while(1)
	{
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 80003c8:	bf00      	nop
 80003ca:	2100      	movs	r1, #0
 80003cc:	481a      	ldr	r0, [pc, #104]	; (8000438 <main+0x94>)
 80003ce:	f000 fab3 	bl	8000938 <GPIO_ReadFromInputPin>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d0f8      	beq.n	80003ca <main+0x26>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 80003d8:	f7ff ff62 	bl	80002a0 <delay>


		CommandCode = 0x51;
 80003dc:	2351      	movs	r3, #81	; 0x51
 80003de:	71fb      	strb	r3, [r7, #7]
		I2C_MasterSendData(&I2C1Handle, &CommandCode, 1 , SLAVE_ADDR , 0);
 80003e0:	1df9      	adds	r1, r7, #7
 80003e2:	2300      	movs	r3, #0
 80003e4:	9300      	str	r3, [sp, #0]
 80003e6:	2368      	movs	r3, #104	; 0x68
 80003e8:	2201      	movs	r2, #1
 80003ea:	4814      	ldr	r0, [pc, #80]	; (800043c <main+0x98>)
 80003ec:	f000 fc58 	bl	8000ca0 <I2C_MasterSendData>

		I2C_MasterReceiveData(&I2C1Handle, &len , 1 , SLAVE_ADDR , 0);
 80003f0:	1db9      	adds	r1, r7, #6
 80003f2:	2300      	movs	r3, #0
 80003f4:	9300      	str	r3, [sp, #0]
 80003f6:	2368      	movs	r3, #104	; 0x68
 80003f8:	2201      	movs	r2, #1
 80003fa:	4810      	ldr	r0, [pc, #64]	; (800043c <main+0x98>)
 80003fc:	f000 fcb3 	bl	8000d66 <I2C_MasterReceiveData>

		CommandCode = 0x52;
 8000400:	2352      	movs	r3, #82	; 0x52
 8000402:	71fb      	strb	r3, [r7, #7]
		I2C_MasterSendData(&I2C1Handle, &CommandCode, 1 , SLAVE_ADDR , 0);
 8000404:	1df9      	adds	r1, r7, #7
 8000406:	2300      	movs	r3, #0
 8000408:	9300      	str	r3, [sp, #0]
 800040a:	2368      	movs	r3, #104	; 0x68
 800040c:	2201      	movs	r2, #1
 800040e:	480b      	ldr	r0, [pc, #44]	; (800043c <main+0x98>)
 8000410:	f000 fc46 	bl	8000ca0 <I2C_MasterSendData>

		I2C_MasterReceiveData(&I2C1Handle, rcv_buffer , len , SLAVE_ADDR , 1);
 8000414:	79ba      	ldrb	r2, [r7, #6]
 8000416:	2301      	movs	r3, #1
 8000418:	9300      	str	r3, [sp, #0]
 800041a:	2368      	movs	r3, #104	; 0x68
 800041c:	4908      	ldr	r1, [pc, #32]	; (8000440 <main+0x9c>)
 800041e:	4807      	ldr	r0, [pc, #28]	; (800043c <main+0x98>)
 8000420:	f000 fca1 	bl	8000d66 <I2C_MasterReceiveData>

		printf("Data : %s", rcv_buffer);
 8000424:	4906      	ldr	r1, [pc, #24]	; (8000440 <main+0x9c>)
 8000426:	4807      	ldr	r0, [pc, #28]	; (8000444 <main+0xa0>)
 8000428:	f000 fdde 	bl	8000fe8 <iprintf>
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 800042c:	e7cc      	b.n	80003c8 <main+0x24>
 800042e:	bf00      	nop
 8000430:	080023e0 	.word	0x080023e0
 8000434:	40005400 	.word	0x40005400
 8000438:	40020000 	.word	0x40020000
 800043c:	20000174 	.word	0x20000174
 8000440:	20000154 	.word	0x20000154
 8000444:	080023f8 	.word	0x080023f8

08000448 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b084      	sub	sp, #16
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000450:	4b11      	ldr	r3, [pc, #68]	; (8000498 <_sbrk+0x50>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	2b00      	cmp	r3, #0
 8000456:	d102      	bne.n	800045e <_sbrk+0x16>
		heap_end = &end;
 8000458:	4b0f      	ldr	r3, [pc, #60]	; (8000498 <_sbrk+0x50>)
 800045a:	4a10      	ldr	r2, [pc, #64]	; (800049c <_sbrk+0x54>)
 800045c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800045e:	4b0e      	ldr	r3, [pc, #56]	; (8000498 <_sbrk+0x50>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000464:	4b0c      	ldr	r3, [pc, #48]	; (8000498 <_sbrk+0x50>)
 8000466:	681a      	ldr	r2, [r3, #0]
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	4413      	add	r3, r2
 800046c:	466a      	mov	r2, sp
 800046e:	4293      	cmp	r3, r2
 8000470:	d907      	bls.n	8000482 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000472:	f000 fd87 	bl	8000f84 <__errno>
 8000476:	4602      	mov	r2, r0
 8000478:	230c      	movs	r3, #12
 800047a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800047c:	f04f 33ff 	mov.w	r3, #4294967295
 8000480:	e006      	b.n	8000490 <_sbrk+0x48>
	}

	heap_end += incr;
 8000482:	4b05      	ldr	r3, [pc, #20]	; (8000498 <_sbrk+0x50>)
 8000484:	681a      	ldr	r2, [r3, #0]
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	4413      	add	r3, r2
 800048a:	4a03      	ldr	r2, [pc, #12]	; (8000498 <_sbrk+0x50>)
 800048c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800048e:	68fb      	ldr	r3, [r7, #12]
}
 8000490:	4618      	mov	r0, r3
 8000492:	3710      	adds	r7, #16
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	2000009c 	.word	0x2000009c
 800049c:	200001a0 	.word	0x200001a0

080004a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004a0:	480d      	ldr	r0, [pc, #52]	; (80004d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004a2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004a4:	480d      	ldr	r0, [pc, #52]	; (80004dc <LoopForever+0x6>)
  ldr r1, =_edata
 80004a6:	490e      	ldr	r1, [pc, #56]	; (80004e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004a8:	4a0e      	ldr	r2, [pc, #56]	; (80004e4 <LoopForever+0xe>)
  movs r3, #0
 80004aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004ac:	e002      	b.n	80004b4 <LoopCopyDataInit>

080004ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004b2:	3304      	adds	r3, #4

080004b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004b8:	d3f9      	bcc.n	80004ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ba:	4a0b      	ldr	r2, [pc, #44]	; (80004e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004bc:	4c0b      	ldr	r4, [pc, #44]	; (80004ec <LoopForever+0x16>)
  movs r3, #0
 80004be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004c0:	e001      	b.n	80004c6 <LoopFillZerobss>

080004c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004c4:	3204      	adds	r2, #4

080004c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004c8:	d3fb      	bcc.n	80004c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80004ca:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80004ce:	f000 fd5f 	bl	8000f90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004d2:	f7ff ff67 	bl	80003a4 <main>

080004d6 <LoopForever>:

LoopForever:
    b LoopForever
 80004d6:	e7fe      	b.n	80004d6 <LoopForever>
  ldr   r0, =_estack
 80004d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004e0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80004e4:	080024c0 	.word	0x080024c0
  ldr r2, =_sbss
 80004e8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80004ec:	200001a0 	.word	0x200001a0

080004f0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004f0:	e7fe      	b.n	80004f0 <ADC_IRQHandler>
	...

080004f4 <GPIO_PeriClockControl>:
 * @return            -  none
 *
 * @Note              -  none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	460b      	mov	r3, r1
 80004fe:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000500:	78fb      	ldrb	r3, [r7, #3]
 8000502:	2b01      	cmp	r3, #1
 8000504:	d161      	bne.n	80005ca <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	4a33      	ldr	r2, [pc, #204]	; (80005d8 <GPIO_PeriClockControl+0xe4>)
 800050a:	4293      	cmp	r3, r2
 800050c:	d106      	bne.n	800051c <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800050e:	4b33      	ldr	r3, [pc, #204]	; (80005dc <GPIO_PeriClockControl+0xe8>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	4a32      	ldr	r2, [pc, #200]	; (80005dc <GPIO_PeriClockControl+0xe8>)
 8000514:	f043 0301 	orr.w	r3, r3, #1
 8000518:	6313      	str	r3, [r2, #48]	; 0x30
	else
	{
		//TODO
	}

}
 800051a:	e056      	b.n	80005ca <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	4a30      	ldr	r2, [pc, #192]	; (80005e0 <GPIO_PeriClockControl+0xec>)
 8000520:	4293      	cmp	r3, r2
 8000522:	d106      	bne.n	8000532 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000524:	4b2d      	ldr	r3, [pc, #180]	; (80005dc <GPIO_PeriClockControl+0xe8>)
 8000526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000528:	4a2c      	ldr	r2, [pc, #176]	; (80005dc <GPIO_PeriClockControl+0xe8>)
 800052a:	f043 0302 	orr.w	r3, r3, #2
 800052e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000530:	e04b      	b.n	80005ca <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4a2b      	ldr	r2, [pc, #172]	; (80005e4 <GPIO_PeriClockControl+0xf0>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d106      	bne.n	8000548 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800053a:	4b28      	ldr	r3, [pc, #160]	; (80005dc <GPIO_PeriClockControl+0xe8>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	4a27      	ldr	r2, [pc, #156]	; (80005dc <GPIO_PeriClockControl+0xe8>)
 8000540:	f043 0304 	orr.w	r3, r3, #4
 8000544:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000546:	e040      	b.n	80005ca <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	4a27      	ldr	r2, [pc, #156]	; (80005e8 <GPIO_PeriClockControl+0xf4>)
 800054c:	4293      	cmp	r3, r2
 800054e:	d106      	bne.n	800055e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000550:	4b22      	ldr	r3, [pc, #136]	; (80005dc <GPIO_PeriClockControl+0xe8>)
 8000552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000554:	4a21      	ldr	r2, [pc, #132]	; (80005dc <GPIO_PeriClockControl+0xe8>)
 8000556:	f043 0308 	orr.w	r3, r3, #8
 800055a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800055c:	e035      	b.n	80005ca <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4a22      	ldr	r2, [pc, #136]	; (80005ec <GPIO_PeriClockControl+0xf8>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d106      	bne.n	8000574 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000566:	4b1d      	ldr	r3, [pc, #116]	; (80005dc <GPIO_PeriClockControl+0xe8>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	4a1c      	ldr	r2, [pc, #112]	; (80005dc <GPIO_PeriClockControl+0xe8>)
 800056c:	f043 0310 	orr.w	r3, r3, #16
 8000570:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000572:	e02a      	b.n	80005ca <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	4a1e      	ldr	r2, [pc, #120]	; (80005f0 <GPIO_PeriClockControl+0xfc>)
 8000578:	4293      	cmp	r3, r2
 800057a:	d106      	bne.n	800058a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 800057c:	4b17      	ldr	r3, [pc, #92]	; (80005dc <GPIO_PeriClockControl+0xe8>)
 800057e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000580:	4a16      	ldr	r2, [pc, #88]	; (80005dc <GPIO_PeriClockControl+0xe8>)
 8000582:	f043 0320 	orr.w	r3, r3, #32
 8000586:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000588:	e01f      	b.n	80005ca <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4a19      	ldr	r2, [pc, #100]	; (80005f4 <GPIO_PeriClockControl+0x100>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d106      	bne.n	80005a0 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000592:	4b12      	ldr	r3, [pc, #72]	; (80005dc <GPIO_PeriClockControl+0xe8>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	4a11      	ldr	r2, [pc, #68]	; (80005dc <GPIO_PeriClockControl+0xe8>)
 8000598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800059c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800059e:	e014      	b.n	80005ca <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	4a15      	ldr	r2, [pc, #84]	; (80005f8 <GPIO_PeriClockControl+0x104>)
 80005a4:	4293      	cmp	r3, r2
 80005a6:	d106      	bne.n	80005b6 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80005a8:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <GPIO_PeriClockControl+0xe8>)
 80005aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ac:	4a0b      	ldr	r2, [pc, #44]	; (80005dc <GPIO_PeriClockControl+0xe8>)
 80005ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005b2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005b4:	e009      	b.n	80005ca <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4a10      	ldr	r2, [pc, #64]	; (80005fc <GPIO_PeriClockControl+0x108>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d105      	bne.n	80005ca <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 80005be:	4b07      	ldr	r3, [pc, #28]	; (80005dc <GPIO_PeriClockControl+0xe8>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a06      	ldr	r2, [pc, #24]	; (80005dc <GPIO_PeriClockControl+0xe8>)
 80005c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005ca:	bf00      	nop
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	40020000 	.word	0x40020000
 80005dc:	40023800 	.word	0x40023800
 80005e0:	40020400 	.word	0x40020400
 80005e4:	40020800 	.word	0x40020800
 80005e8:	40020c00 	.word	0x40020c00
 80005ec:	40021000 	.word	0x40021000
 80005f0:	40021400 	.word	0x40021400
 80005f4:	40021800 	.word	0x40021800
 80005f8:	40021c00 	.word	0x40021c00
 80005fc:	40022000 	.word	0x40022000

08000600 <GPIO_Init>:
 * @return            -
 *
 * @Note              -
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2101      	movs	r1, #1
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff ff6e 	bl	80004f4 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	795b      	ldrb	r3, [r3, #5]
 800061c:	2b03      	cmp	r3, #3
 800061e:	d820      	bhi.n	8000662 <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	795b      	ldrb	r3, [r3, #5]
 8000624:	461a      	mov	r2, r3
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	791b      	ldrb	r3, [r3, #4]
 800062a:	005b      	lsls	r3, r3, #1
 800062c:	fa02 f303 	lsl.w	r3, r2, r3
 8000630:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	791b      	ldrb	r3, [r3, #4]
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	2103      	movs	r1, #3
 8000640:	fa01 f303 	lsl.w	r3, r1, r3
 8000644:	43db      	mvns	r3, r3
 8000646:	4619      	mov	r1, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	400a      	ands	r2, r1
 800064e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	6819      	ldr	r1, [r3, #0]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	697a      	ldr	r2, [r7, #20]
 800065c:	430a      	orrs	r2, r1
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	e0cb      	b.n	80007fa <GPIO_Init+0x1fa>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	795b      	ldrb	r3, [r3, #5]
 8000666:	2b04      	cmp	r3, #4
 8000668:	d117      	bne.n	800069a <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800066a:	4b4b      	ldr	r3, [pc, #300]	; (8000798 <GPIO_Init+0x198>)
 800066c:	68db      	ldr	r3, [r3, #12]
 800066e:	687a      	ldr	r2, [r7, #4]
 8000670:	7912      	ldrb	r2, [r2, #4]
 8000672:	4611      	mov	r1, r2
 8000674:	2201      	movs	r2, #1
 8000676:	408a      	lsls	r2, r1
 8000678:	4611      	mov	r1, r2
 800067a:	4a47      	ldr	r2, [pc, #284]	; (8000798 <GPIO_Init+0x198>)
 800067c:	430b      	orrs	r3, r1
 800067e:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000680:	4b45      	ldr	r3, [pc, #276]	; (8000798 <GPIO_Init+0x198>)
 8000682:	689b      	ldr	r3, [r3, #8]
 8000684:	687a      	ldr	r2, [r7, #4]
 8000686:	7912      	ldrb	r2, [r2, #4]
 8000688:	4611      	mov	r1, r2
 800068a:	2201      	movs	r2, #1
 800068c:	408a      	lsls	r2, r1
 800068e:	43d2      	mvns	r2, r2
 8000690:	4611      	mov	r1, r2
 8000692:	4a41      	ldr	r2, [pc, #260]	; (8000798 <GPIO_Init+0x198>)
 8000694:	400b      	ands	r3, r1
 8000696:	6093      	str	r3, [r2, #8]
 8000698:	e035      	b.n	8000706 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	795b      	ldrb	r3, [r3, #5]
 800069e:	2b05      	cmp	r3, #5
 80006a0:	d117      	bne.n	80006d2 <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006a2:	4b3d      	ldr	r3, [pc, #244]	; (8000798 <GPIO_Init+0x198>)
 80006a4:	689b      	ldr	r3, [r3, #8]
 80006a6:	687a      	ldr	r2, [r7, #4]
 80006a8:	7912      	ldrb	r2, [r2, #4]
 80006aa:	4611      	mov	r1, r2
 80006ac:	2201      	movs	r2, #1
 80006ae:	408a      	lsls	r2, r1
 80006b0:	4611      	mov	r1, r2
 80006b2:	4a39      	ldr	r2, [pc, #228]	; (8000798 <GPIO_Init+0x198>)
 80006b4:	430b      	orrs	r3, r1
 80006b6:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006b8:	4b37      	ldr	r3, [pc, #220]	; (8000798 <GPIO_Init+0x198>)
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	687a      	ldr	r2, [r7, #4]
 80006be:	7912      	ldrb	r2, [r2, #4]
 80006c0:	4611      	mov	r1, r2
 80006c2:	2201      	movs	r2, #1
 80006c4:	408a      	lsls	r2, r1
 80006c6:	43d2      	mvns	r2, r2
 80006c8:	4611      	mov	r1, r2
 80006ca:	4a33      	ldr	r2, [pc, #204]	; (8000798 <GPIO_Init+0x198>)
 80006cc:	400b      	ands	r3, r1
 80006ce:	60d3      	str	r3, [r2, #12]
 80006d0:	e019      	b.n	8000706 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	795b      	ldrb	r3, [r3, #5]
 80006d6:	2b06      	cmp	r3, #6
 80006d8:	d115      	bne.n	8000706 <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006da:	4b2f      	ldr	r3, [pc, #188]	; (8000798 <GPIO_Init+0x198>)
 80006dc:	689b      	ldr	r3, [r3, #8]
 80006de:	687a      	ldr	r2, [r7, #4]
 80006e0:	7912      	ldrb	r2, [r2, #4]
 80006e2:	4611      	mov	r1, r2
 80006e4:	2201      	movs	r2, #1
 80006e6:	408a      	lsls	r2, r1
 80006e8:	4611      	mov	r1, r2
 80006ea:	4a2b      	ldr	r2, [pc, #172]	; (8000798 <GPIO_Init+0x198>)
 80006ec:	430b      	orrs	r3, r1
 80006ee:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006f0:	4b29      	ldr	r3, [pc, #164]	; (8000798 <GPIO_Init+0x198>)
 80006f2:	68db      	ldr	r3, [r3, #12]
 80006f4:	687a      	ldr	r2, [r7, #4]
 80006f6:	7912      	ldrb	r2, [r2, #4]
 80006f8:	4611      	mov	r1, r2
 80006fa:	2201      	movs	r2, #1
 80006fc:	408a      	lsls	r2, r1
 80006fe:	4611      	mov	r1, r2
 8000700:	4a25      	ldr	r2, [pc, #148]	; (8000798 <GPIO_Init+0x198>)
 8000702:	430b      	orrs	r3, r1
 8000704:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	791b      	ldrb	r3, [r3, #4]
 800070a:	089b      	lsrs	r3, r3, #2
 800070c:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	791b      	ldrb	r3, [r3, #4]
 8000712:	f003 0303 	and.w	r3, r3, #3
 8000716:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a1f      	ldr	r2, [pc, #124]	; (800079c <GPIO_Init+0x19c>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d04e      	beq.n	80007c0 <GPIO_Init+0x1c0>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a1e      	ldr	r2, [pc, #120]	; (80007a0 <GPIO_Init+0x1a0>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d032      	beq.n	8000792 <GPIO_Init+0x192>
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a1c      	ldr	r2, [pc, #112]	; (80007a4 <GPIO_Init+0x1a4>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d02b      	beq.n	800078e <GPIO_Init+0x18e>
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a1b      	ldr	r2, [pc, #108]	; (80007a8 <GPIO_Init+0x1a8>)
 800073c:	4293      	cmp	r3, r2
 800073e:	d024      	beq.n	800078a <GPIO_Init+0x18a>
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a19      	ldr	r2, [pc, #100]	; (80007ac <GPIO_Init+0x1ac>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d01d      	beq.n	8000786 <GPIO_Init+0x186>
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a18      	ldr	r2, [pc, #96]	; (80007b0 <GPIO_Init+0x1b0>)
 8000750:	4293      	cmp	r3, r2
 8000752:	d016      	beq.n	8000782 <GPIO_Init+0x182>
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a16      	ldr	r2, [pc, #88]	; (80007b4 <GPIO_Init+0x1b4>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d00f      	beq.n	800077e <GPIO_Init+0x17e>
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a15      	ldr	r2, [pc, #84]	; (80007b8 <GPIO_Init+0x1b8>)
 8000764:	4293      	cmp	r3, r2
 8000766:	d008      	beq.n	800077a <GPIO_Init+0x17a>
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a13      	ldr	r2, [pc, #76]	; (80007bc <GPIO_Init+0x1bc>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d101      	bne.n	8000776 <GPIO_Init+0x176>
 8000772:	2308      	movs	r3, #8
 8000774:	e025      	b.n	80007c2 <GPIO_Init+0x1c2>
 8000776:	2300      	movs	r3, #0
 8000778:	e023      	b.n	80007c2 <GPIO_Init+0x1c2>
 800077a:	2307      	movs	r3, #7
 800077c:	e021      	b.n	80007c2 <GPIO_Init+0x1c2>
 800077e:	2306      	movs	r3, #6
 8000780:	e01f      	b.n	80007c2 <GPIO_Init+0x1c2>
 8000782:	2305      	movs	r3, #5
 8000784:	e01d      	b.n	80007c2 <GPIO_Init+0x1c2>
 8000786:	2304      	movs	r3, #4
 8000788:	e01b      	b.n	80007c2 <GPIO_Init+0x1c2>
 800078a:	2303      	movs	r3, #3
 800078c:	e019      	b.n	80007c2 <GPIO_Init+0x1c2>
 800078e:	2302      	movs	r3, #2
 8000790:	e017      	b.n	80007c2 <GPIO_Init+0x1c2>
 8000792:	2301      	movs	r3, #1
 8000794:	e015      	b.n	80007c2 <GPIO_Init+0x1c2>
 8000796:	bf00      	nop
 8000798:	40013c00 	.word	0x40013c00
 800079c:	40020000 	.word	0x40020000
 80007a0:	40020400 	.word	0x40020400
 80007a4:	40020800 	.word	0x40020800
 80007a8:	40020c00 	.word	0x40020c00
 80007ac:	40021000 	.word	0x40021000
 80007b0:	40021400 	.word	0x40021400
 80007b4:	40021800 	.word	0x40021800
 80007b8:	40021c00 	.word	0x40021c00
 80007bc:	40022000 	.word	0x40022000
 80007c0:	2300      	movs	r3, #0
 80007c2:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80007c4:	4b59      	ldr	r3, [pc, #356]	; (800092c <GPIO_Init+0x32c>)
 80007c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c8:	4a58      	ldr	r2, [pc, #352]	; (800092c <GPIO_Init+0x32c>)
 80007ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ce:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 80007d0:	7c7a      	ldrb	r2, [r7, #17]
 80007d2:	7cbb      	ldrb	r3, [r7, #18]
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	fa02 f103 	lsl.w	r1, r2, r3
 80007da:	4a55      	ldr	r2, [pc, #340]	; (8000930 <GPIO_Init+0x330>)
 80007dc:	7cfb      	ldrb	r3, [r7, #19]
 80007de:	3302      	adds	r3, #2
 80007e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80007e4:	4b53      	ldr	r3, [pc, #332]	; (8000934 <GPIO_Init+0x334>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	7912      	ldrb	r2, [r2, #4]
 80007ec:	4611      	mov	r1, r2
 80007ee:	2201      	movs	r2, #1
 80007f0:	408a      	lsls	r2, r1
 80007f2:	4611      	mov	r1, r2
 80007f4:	4a4f      	ldr	r2, [pc, #316]	; (8000934 <GPIO_Init+0x334>)
 80007f6:	430b      	orrs	r3, r1
 80007f8:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	799b      	ldrb	r3, [r3, #6]
 80007fe:	461a      	mov	r2, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	791b      	ldrb	r3, [r3, #4]
 8000804:	005b      	lsls	r3, r3, #1
 8000806:	fa02 f303 	lsl.w	r3, r2, r3
 800080a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	689a      	ldr	r2, [r3, #8]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	791b      	ldrb	r3, [r3, #4]
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	2103      	movs	r1, #3
 800081a:	fa01 f303 	lsl.w	r3, r1, r3
 800081e:	43db      	mvns	r3, r3
 8000820:	4619      	mov	r1, r3
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	400a      	ands	r2, r1
 8000828:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	6899      	ldr	r1, [r3, #8]
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	697a      	ldr	r2, [r7, #20]
 8000836:	430a      	orrs	r2, r1
 8000838:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	79db      	ldrb	r3, [r3, #7]
 800083e:	461a      	mov	r2, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	791b      	ldrb	r3, [r3, #4]
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	fa02 f303 	lsl.w	r3, r2, r3
 800084a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	68da      	ldr	r2, [r3, #12]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	791b      	ldrb	r3, [r3, #4]
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	2103      	movs	r1, #3
 800085a:	fa01 f303 	lsl.w	r3, r1, r3
 800085e:	43db      	mvns	r3, r3
 8000860:	4619      	mov	r1, r3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	400a      	ands	r2, r1
 8000868:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	68d9      	ldr	r1, [r3, #12]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	697a      	ldr	r2, [r7, #20]
 8000876:	430a      	orrs	r2, r1
 8000878:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	7a1b      	ldrb	r3, [r3, #8]
 800087e:	461a      	mov	r2, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	791b      	ldrb	r3, [r3, #4]
 8000884:	fa02 f303 	lsl.w	r3, r2, r3
 8000888:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	685a      	ldr	r2, [r3, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	791b      	ldrb	r3, [r3, #4]
 8000894:	4619      	mov	r1, r3
 8000896:	2301      	movs	r3, #1
 8000898:	408b      	lsls	r3, r1
 800089a:	43db      	mvns	r3, r3
 800089c:	4619      	mov	r1, r3
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	400a      	ands	r2, r1
 80008a4:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	6859      	ldr	r1, [r3, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	697a      	ldr	r2, [r7, #20]
 80008b2:	430a      	orrs	r2, r1
 80008b4:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	795b      	ldrb	r3, [r3, #5]
 80008ba:	2b02      	cmp	r3, #2
 80008bc:	d131      	bne.n	8000922 <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	791b      	ldrb	r3, [r3, #4]
 80008c2:	08db      	lsrs	r3, r3, #3
 80008c4:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	791b      	ldrb	r3, [r3, #4]
 80008ca:	f003 0307 	and.w	r3, r3, #7
 80008ce:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	7c3a      	ldrb	r2, [r7, #16]
 80008d6:	3208      	adds	r2, #8
 80008d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80008dc:	7bfb      	ldrb	r3, [r7, #15]
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	220f      	movs	r2, #15
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	43db      	mvns	r3, r3
 80008e8:	4618      	mov	r0, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	7c3a      	ldrb	r2, [r7, #16]
 80008f0:	4001      	ands	r1, r0
 80008f2:	3208      	adds	r2, #8
 80008f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	7c3a      	ldrb	r2, [r7, #16]
 80008fe:	3208      	adds	r2, #8
 8000900:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	7a5b      	ldrb	r3, [r3, #9]
 8000908:	461a      	mov	r2, r3
 800090a:	7bfb      	ldrb	r3, [r7, #15]
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	4618      	mov	r0, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	7c3a      	ldrb	r2, [r7, #16]
 800091a:	4301      	orrs	r1, r0
 800091c:	3208      	adds	r2, #8
 800091e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000922:	bf00      	nop
 8000924:	3718      	adds	r7, #24
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40023800 	.word	0x40023800
 8000930:	40013800 	.word	0x40013800
 8000934:	40013c00 	.word	0x40013c00

08000938 <GPIO_ReadFromInputPin>:
 * @return            -   0 or 1
 *
 * @Note              -
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	460b      	mov	r3, r1
 8000942:	70fb      	strb	r3, [r7, #3]
   uint8_t value;

   value = (uint8_t )((pGPIOx->IDR  >> PinNumber) & 0x00000001 ) ;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	691a      	ldr	r2, [r3, #16]
 8000948:	78fb      	ldrb	r3, [r7, #3]
 800094a:	fa22 f303 	lsr.w	r3, r2, r3
 800094e:	b2db      	uxtb	r3, r3
 8000950:	f003 0301 	and.w	r3, r3, #1
 8000954:	73fb      	strb	r3, [r7, #15]

   return value;
 8000956:	7bfb      	ldrb	r3, [r7, #15]
}
 8000958:	4618      	mov	r0, r3
 800095a:	3714      	adds	r7, #20
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <I2C_GenerateStartCondition>:

static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle );
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle );

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	601a      	str	r2, [r3, #0]
}
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <I2C_ExecuteAddressPhaseWrite>:



static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	460b      	mov	r3, r1
 800098e:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8000990:	78fb      	ldrb	r3, [r7, #3]
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/nw bit=0
 8000996:	78fb      	ldrb	r3, [r7, #3]
 8000998:	f023 0301 	bic.w	r3, r3, #1
 800099c:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 800099e:	78fa      	ldrb	r2, [r7, #3]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	611a      	str	r2, [r3, #16]
}
 80009a4:	bf00      	nop
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <I2C_ExecuteAddressPhaseRead>:


static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	460b      	mov	r3, r1
 80009ba:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 80009bc:	78fb      	ldrb	r3, [r7, #3]
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; //SlaveAddr is Slave address + r/nw bit=1
 80009c2:	78fb      	ldrb	r3, [r7, #3]
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 80009ca:	78fa      	ldrb	r2, [r7, #3]
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	611a      	str	r2, [r3, #16]
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <I2C_ClearADDRFlag>:


static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle )
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	699b      	ldr	r3, [r3, #24]
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d01f      	beq.n	8000a32 <I2C_ClearADDRFlag+0x56>
	{
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	7f1b      	ldrb	r3, [r3, #28]
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d112      	bne.n	8000a20 <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize  == 1)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6a1b      	ldr	r3, [r3, #32]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d11f      	bne.n	8000a42 <I2C_ClearADDRFlag+0x66>
			{
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2100      	movs	r1, #0
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f000 fa3e 	bl	8000e8a <I2C_ManageAcking>

				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	695b      	ldr	r3, [r3, #20]
 8000a14:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}


}
 8000a1e:	e010      	b.n	8000a42 <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	695b      	ldr	r3, [r3, #20]
 8000a26:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	699b      	ldr	r3, [r3, #24]
 8000a2e:	60fb      	str	r3, [r7, #12]
}
 8000a30:	e007      	b.n	8000a42 <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	695b      	ldr	r3, [r3, #20]
 8000a38:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	60fb      	str	r3, [r7, #12]
}
 8000a42:	bf00      	nop
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <I2C_GenerateStopCondition>:


 void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	601a      	str	r2, [r3, #0]
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr

08000a6a <I2C_PeripheralControl>:
 * @return            -
 *
 * @Note              -
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	b083      	sub	sp, #12
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
 8000a72:	460b      	mov	r3, r1
 8000a74:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000a76:	78fb      	ldrb	r3, [r7, #3]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d106      	bne.n	8000a8a <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f043 0201 	orr.w	r2, r3, #1
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	601a      	str	r2, [r3, #0]
	}else
	{
		pI2Cx->CR1 &= ~(1 << 0);
	}

}
 8000a88:	e005      	b.n	8000a96 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f023 0201 	bic.w	r2, r3, #1
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	601a      	str	r2, [r3, #0]
}
 8000a96:	bf00      	nop
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
	...

08000aa4 <I2C_PeriClockControl>:
 * @return            -
 *
 * @Note              -
 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	460b      	mov	r3, r1
 8000aae:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000ab0:	78fb      	ldrb	r3, [r7, #3]
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d11f      	bne.n	8000af6 <I2C_PeriClockControl+0x52>
	{
		if(pI2Cx == I2C1)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4a12      	ldr	r2, [pc, #72]	; (8000b04 <I2C_PeriClockControl+0x60>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d106      	bne.n	8000acc <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 8000abe:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <I2C_PeriClockControl+0x64>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	4a11      	ldr	r2, [pc, #68]	; (8000b08 <I2C_PeriClockControl+0x64>)
 8000ac4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ac8:	6413      	str	r3, [r2, #64]	; 0x40
	else
	{
		//TODO
	}

}
 8000aca:	e014      	b.n	8000af6 <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C2)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a0f      	ldr	r2, [pc, #60]	; (8000b0c <I2C_PeriClockControl+0x68>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d106      	bne.n	8000ae2 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <I2C_PeriClockControl+0x64>)
 8000ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad8:	4a0b      	ldr	r2, [pc, #44]	; (8000b08 <I2C_PeriClockControl+0x64>)
 8000ada:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ade:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ae0:	e009      	b.n	8000af6 <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C3)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <I2C_PeriClockControl+0x6c>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d105      	bne.n	8000af6 <I2C_PeriClockControl+0x52>
			I2C3_PCLK_EN();
 8000aea:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <I2C_PeriClockControl+0x64>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	4a06      	ldr	r2, [pc, #24]	; (8000b08 <I2C_PeriClockControl+0x64>)
 8000af0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000af4:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000af6:	bf00      	nop
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	40005400 	.word	0x40005400
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40005800 	.word	0x40005800
 8000b10:	40005c00 	.word	0x40005c00

08000b14 <I2C_Init>:
 * @return            -
 *
 * @Note              -
 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0 ;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx,ENABLE);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2101      	movs	r1, #1
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff ffbc 	bl	8000aa4 <I2C_PeriClockControl>

	//ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	7a5b      	ldrb	r3, [r3, #9]
 8000b30:	029b      	lsls	r3, r3, #10
 8000b32:	461a      	mov	r2, r3
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	68fa      	ldr	r2, [r7, #12]
 8000b40:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() /1000000U ;
 8000b46:	f000 f9c5 	bl	8000ed4 <RCC_GetPCLK1Value>
 8000b4a:	4602      	mov	r2, r0
 8000b4c:	4b47      	ldr	r3, [pc, #284]	; (8000c6c <I2C_Init+0x158>)
 8000b4e:	fba3 2302 	umull	r2, r3, r3, r2
 8000b52:	0c9b      	lsrs	r3, r3, #18
 8000b54:	68fa      	ldr	r2, [r7, #12]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 =  (tempreg & 0x3F);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	68fa      	ldr	r2, [r7, #12]
 8000b60:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000b64:	605a      	str	r2, [r3, #4]

   //program the device own address
	tempreg = 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	7a1b      	ldrb	r3, [r3, #8]
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	461a      	mov	r2, r3
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	60fb      	str	r3, [r7, #12]
	tempreg |= ( 1 << 14);
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b7e:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	68fa      	ldr	r2, [r7, #12]
 8000b86:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	4a36      	ldr	r2, [pc, #216]	; (8000c70 <I2C_Init+0x15c>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d80f      	bhi.n	8000bba <I2C_Init+0xa6>
	{
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000b9a:	f000 f99b 	bl	8000ed4 <RCC_GetPCLK1Value>
 8000b9e:	4602      	mov	r2, r0
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000baa:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000bac:	897b      	ldrh	r3, [r7, #10]
 8000bae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000bb2:	68fa      	ldr	r2, [r7, #12]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	e02d      	b.n	8000c16 <I2C_Init+0x102>
	}else
	{
		//mode is fast mode
		tempreg |= ( 1 << 15);
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bc0:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	7a9b      	ldrb	r3, [r3, #10]
 8000bc6:	039b      	lsls	r3, r3, #14
 8000bc8:	461a      	mov	r2, r3
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	7a9b      	ldrb	r3, [r3, #10]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d10b      	bne.n	8000bf0 <I2C_Init+0xdc>
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000bd8:	f000 f97c 	bl	8000ed4 <RCC_GetPCLK1Value>
 8000bdc:	4601      	mov	r1, r0
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	685a      	ldr	r2, [r3, #4]
 8000be2:	4613      	mov	r3, r2
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	4413      	add	r3, r2
 8000be8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bec:	817b      	strh	r3, [r7, #10]
 8000bee:	e00c      	b.n	8000c0a <I2C_Init+0xf6>
		}else
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000bf0:	f000 f970 	bl	8000ed4 <RCC_GetPCLK1Value>
 8000bf4:	4601      	mov	r1, r0
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	685a      	ldr	r2, [r3, #4]
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	4413      	add	r3, r2
 8000c00:	009a      	lsls	r2, r3, #2
 8000c02:	4413      	add	r3, r2
 8000c04:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c08:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8000c0a:	897b      	ldrh	r3, [r7, #10]
 8000c0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c10:	68fa      	ldr	r2, [r7, #12]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	68fa      	ldr	r2, [r7, #12]
 8000c1c:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	4a13      	ldr	r2, [pc, #76]	; (8000c70 <I2C_Init+0x15c>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d809      	bhi.n	8000c3c <I2C_Init+0x128>
	{
		//mode is standard mode

		tempreg = (RCC_GetPCLK1Value() /1000000U) + 1 ;
 8000c28:	f000 f954 	bl	8000ed4 <RCC_GetPCLK1Value>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <I2C_Init+0x158>)
 8000c30:	fba3 2302 	umull	r2, r3, r3, r2
 8000c34:	0c9b      	lsrs	r3, r3, #18
 8000c36:	3301      	adds	r3, #1
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	e00d      	b.n	8000c58 <I2C_Init+0x144>

	}else
	{
		//mode is fast mode
		tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1;
 8000c3c:	f000 f94a 	bl	8000ed4 <RCC_GetPCLK1Value>
 8000c40:	4602      	mov	r2, r0
 8000c42:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000c46:	fb03 f302 	mul.w	r3, r3, r2
 8000c4a:	0a5b      	lsrs	r3, r3, #9
 8000c4c:	4a09      	ldr	r2, [pc, #36]	; (8000c74 <I2C_Init+0x160>)
 8000c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c52:	09db      	lsrs	r3, r3, #7
 8000c54:	3301      	adds	r3, #1
 8000c56:	60fb      	str	r3, [r7, #12]

	}

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	68fa      	ldr	r2, [r7, #12]
 8000c5e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000c62:	621a      	str	r2, [r3, #32]

}
 8000c64:	bf00      	nop
 8000c66:	3710      	adds	r7, #16
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	431bde83 	.word	0x431bde83
 8000c70:	000186a0 	.word	0x000186a0
 8000c74:	00044b83 	.word	0x00044b83

08000c78 <I2C_GetFlagStatus>:

}


uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	695a      	ldr	r2, [r3, #20]
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e000      	b.n	8000c94 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000c92:	2300      	movs	r3, #0
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <I2C_MasterSendData>:



void I2C_MasterSendData(I2C_Handle_t *pI2CHandle,uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
 8000cac:	70fb      	strb	r3, [r7, #3]
	// 1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff fe56 	bl	8000964 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB)   );
 8000cb8:	bf00      	nop
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff ffd9 	bl	8000c78 <I2C_GetFlagStatus>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d0f6      	beq.n	8000cba <I2C_MasterSendData+0x1a>

	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits )
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx,SlaveAddr);
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	78fa      	ldrb	r2, [r7, #3]
 8000cd2:	4611      	mov	r1, r2
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fe55 	bl	8000984 <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that address phase is completed by checking the ADDR flag in teh SR1
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR)   );
 8000cda:	bf00      	nop
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2102      	movs	r1, #2
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff ffc8 	bl	8000c78 <I2C_GetFlagStatus>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d0f6      	beq.n	8000cdc <I2C_MasterSendData+0x3c>

	//5. clear the ADDR flag according to its software sequence
	//   Note: Until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle);
 8000cee:	68f8      	ldr	r0, [r7, #12]
 8000cf0:	f7ff fe74 	bl	80009dc <I2C_ClearADDRFlag>

	//6. send the data until len becomes 0

	while(Len > 0)
 8000cf4:	e014      	b.n	8000d20 <I2C_MasterSendData+0x80>
	{
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) ); //Wait till TXE is set
 8000cf6:	bf00      	nop
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2180      	movs	r1, #128	; 0x80
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff ffba 	bl	8000c78 <I2C_GetFlagStatus>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d0f6      	beq.n	8000cf8 <I2C_MasterSendData+0x58>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	781a      	ldrb	r2, [r3, #0]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	3301      	adds	r3, #1
 8000d18:	60bb      	str	r3, [r7, #8]
		Len--;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	3b01      	subs	r3, #1
 8000d1e:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d1e7      	bne.n	8000cf6 <I2C_MasterSendData+0x56>

	//7. when Len becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	//   Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//   when BTF=1 SCL will be stretched (pulled to LOW)

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) );
 8000d26:	bf00      	nop
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2180      	movs	r1, #128	; 0x80
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff ffa2 	bl	8000c78 <I2C_GetFlagStatus>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d0f6      	beq.n	8000d28 <I2C_MasterSendData+0x88>

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_BTF) );
 8000d3a:	bf00      	nop
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2104      	movs	r1, #4
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff ff98 	bl	8000c78 <I2C_GetFlagStatus>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d0f6      	beq.n	8000d3c <I2C_MasterSendData+0x9c>


	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
	//   Note: generating STOP, automatically clears the BTF
	if(Sr == I2C_DISABLE_SR )
 8000d4e:	7e3b      	ldrb	r3, [r7, #24]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d104      	bne.n	8000d5e <I2C_MasterSendData+0xbe>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fe76 	bl	8000a4a <I2C_GenerateStopCondition>

}
 8000d5e:	bf00      	nop
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <I2C_MasterReceiveData>:


void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle,uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b086      	sub	sp, #24
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	60f8      	str	r0, [r7, #12]
 8000d6e:	60b9      	str	r1, [r7, #8]
 8000d70:	4611      	mov	r1, r2
 8000d72:	461a      	mov	r2, r3
 8000d74:	460b      	mov	r3, r1
 8000d76:	71fb      	strb	r3, [r7, #7]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	71bb      	strb	r3, [r7, #6]

	//1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fdef 	bl	8000964 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB)   );
 8000d86:	bf00      	nop
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff ff72 	bl	8000c78 <I2C_GetFlagStatus>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d0f6      	beq.n	8000d88 <I2C_MasterReceiveData+0x22>

	//3. Send the address of the slave with r/nw bit set to R(1) (total 8 bits )
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx,SlaveAddr);
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	79ba      	ldrb	r2, [r7, #6]
 8000da0:	4611      	mov	r1, r2
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff fe04 	bl	80009b0 <I2C_ExecuteAddressPhaseRead>

	//4. wait until address phase is completed by checking the ADDR flag in teh SR1
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR)   );
 8000da8:	bf00      	nop
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2102      	movs	r1, #2
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff ff61 	bl	8000c78 <I2C_GetFlagStatus>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d0f6      	beq.n	8000daa <I2C_MasterReceiveData+0x44>


	//procedure to read only 1 byte from slave
	if(Len == 1)
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d121      	bne.n	8000e06 <I2C_MasterReceiveData+0xa0>
	{
		//Disable Acking
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f000 f85e 	bl	8000e8a <I2C_ManageAcking>


		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8000dce:	68f8      	ldr	r0, [r7, #12]
 8000dd0:	f7ff fe04 	bl	80009dc <I2C_ClearADDRFlag>

		//wait until  RXNE becomes 1
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE) );
 8000dd4:	bf00      	nop
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2140      	movs	r1, #64	; 0x40
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff ff4b 	bl	8000c78 <I2C_GetFlagStatus>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d0f6      	beq.n	8000dd6 <I2C_MasterReceiveData+0x70>

		//generate STOP condition
		if(Sr == I2C_DISABLE_SR )
 8000de8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d104      	bne.n	8000dfa <I2C_MasterReceiveData+0x94>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff fe28 	bl	8000a4a <I2C_GenerateStopCondition>

		//read data in to buffer
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	691b      	ldr	r3, [r3, #16]
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	701a      	strb	r2, [r3, #0]

	}


    //procedure to read data from slave when Len > 1
	if(Len > 1)
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d930      	bls.n	8000e6e <I2C_MasterReceiveData+0x108>
	{
		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8000e0c:	68f8      	ldr	r0, [r7, #12]
 8000e0e:	f7ff fde5 	bl	80009dc <I2C_ClearADDRFlag>

		//read the data until Len becomes zero
		for ( uint32_t i = Len ; i > 0 ; i--)
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	617b      	str	r3, [r7, #20]
 8000e16:	e027      	b.n	8000e68 <I2C_MasterReceiveData+0x102>
		{
			//wait until RXNE becomes 1
			while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE) );
 8000e18:	bf00      	nop
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2140      	movs	r1, #64	; 0x40
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff ff29 	bl	8000c78 <I2C_GetFlagStatus>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d0f6      	beq.n	8000e1a <I2C_MasterReceiveData+0xb4>

			if(i == 2) //if last 2 bytes are remaining
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d10e      	bne.n	8000e50 <I2C_MasterReceiveData+0xea>
			{
				//Disable Acking
				I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2100      	movs	r1, #0
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f000 f826 	bl	8000e8a <I2C_ManageAcking>

				//generate STOP condition
				if(Sr == I2C_DISABLE_SR )
 8000e3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d104      	bne.n	8000e50 <I2C_MasterReceiveData+0xea>
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff fdfd 	bl	8000a4a <I2C_GenerateStopCondition>

			}

			//read the data from data register in to buffer
			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	691b      	ldr	r3, [r3, #16]
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	701a      	strb	r2, [r3, #0]

			//increment the buffer address
			pRxBuffer++;
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	60bb      	str	r3, [r7, #8]
		for ( uint32_t i = Len ; i > 0 ; i--)
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	3b01      	subs	r3, #1
 8000e66:	617b      	str	r3, [r7, #20]
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d1d4      	bne.n	8000e18 <I2C_MasterReceiveData+0xb2>
		}

	}

	//re-enable ACKing
	if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE)
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	7a5b      	ldrb	r3, [r3, #9]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d105      	bne.n	8000e82 <I2C_MasterReceiveData+0x11c>
	{
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_ENABLE);
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f000 f804 	bl	8000e8a <I2C_ManageAcking>
	}

}
 8000e82:	bf00      	nop
 8000e84:	3718      	adds	r7, #24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <I2C_ManageAcking>:


void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	b083      	sub	sp, #12
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
 8000e92:	460b      	mov	r3, r1
 8000e94:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 8000e96:	78fb      	ldrb	r3, [r7, #3]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d106      	bne.n	8000eaa <I2C_ManageAcking+0x20>
	{
		//enable the ack
		pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	601a      	str	r2, [r3, #0]
	}else
	{
		//disable the ack
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
	}
}
 8000ea8:	e005      	b.n	8000eb6 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	601a      	str	r2, [r3, #0]
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <RCC_GetPLLOutputClock>:

uint16_t AHB_PreScaler[8] = {2,4,8,16,64,128,256,512};
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};

uint32_t  RCC_GetPLLOutputClock()
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0

	return 0;
 8000ec6:	2300      	movs	r3, #0
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
	...

08000ed4 <RCC_GetPCLK1Value>:

uint32_t RCC_GetPCLK1Value(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8000eda:	4b25      	ldr	r3, [pc, #148]	; (8000f70 <RCC_GetPCLK1Value+0x9c>)
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	089b      	lsrs	r3, r3, #2
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	f003 0303 	and.w	r3, r3, #3
 8000ee6:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 8000ee8:	7a7b      	ldrb	r3, [r7, #9]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d102      	bne.n	8000ef4 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 8000eee:	4b21      	ldr	r3, [pc, #132]	; (8000f74 <RCC_GetPCLK1Value+0xa0>)
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	e00b      	b.n	8000f0c <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 8000ef4:	7a7b      	ldrb	r3, [r7, #9]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d102      	bne.n	8000f00 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 8000efa:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <RCC_GetPCLK1Value+0xa4>)
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	e005      	b.n	8000f0c <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2)
 8000f00:	7a7b      	ldrb	r3, [r7, #9]
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d102      	bne.n	8000f0c <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 8000f06:	f7ff ffdc 	bl	8000ec2 <RCC_GetPLLOutputClock>
 8000f0a:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 8000f0c:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <RCC_GetPCLK1Value+0x9c>)
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	091b      	lsrs	r3, r3, #4
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	f003 030f 	and.w	r3, r3, #15
 8000f18:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 8000f1a:	7a3b      	ldrb	r3, [r7, #8]
 8000f1c:	2b07      	cmp	r3, #7
 8000f1e:	d802      	bhi.n	8000f26 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8000f20:	2301      	movs	r3, #1
 8000f22:	72fb      	strb	r3, [r7, #11]
 8000f24:	e005      	b.n	8000f32 <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 8000f26:	7a3b      	ldrb	r3, [r7, #8]
 8000f28:	3b08      	subs	r3, #8
 8000f2a:	4a14      	ldr	r2, [pc, #80]	; (8000f7c <RCC_GetPCLK1Value+0xa8>)
 8000f2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f30:	72fb      	strb	r3, [r7, #11]
	}



	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 8000f32:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <RCC_GetPCLK1Value+0x9c>)
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	0a9b      	lsrs	r3, r3, #10
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 8000f40:	7a3b      	ldrb	r3, [r7, #8]
 8000f42:	2b03      	cmp	r3, #3
 8000f44:	d802      	bhi.n	8000f4c <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 8000f46:	2301      	movs	r3, #1
 8000f48:	72bb      	strb	r3, [r7, #10]
 8000f4a:	e004      	b.n	8000f56 <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1p = APB1_PreScaler[temp-4];
 8000f4c:	7a3b      	ldrb	r3, [r7, #8]
 8000f4e:	3b04      	subs	r3, #4
 8000f50:	4a0b      	ldr	r2, [pc, #44]	; (8000f80 <RCC_GetPCLK1Value+0xac>)
 8000f52:	5cd3      	ldrb	r3, [r2, r3]
 8000f54:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 =  (SystemClk / ahbp) /apb1p;
 8000f56:	7afb      	ldrb	r3, [r7, #11]
 8000f58:	68fa      	ldr	r2, [r7, #12]
 8000f5a:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f5e:	7abb      	ldrb	r3, [r7, #10]
 8000f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f64:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000f66:	687b      	ldr	r3, [r7, #4]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40023800 	.word	0x40023800
 8000f74:	00f42400 	.word	0x00f42400
 8000f78:	007a1200 	.word	0x007a1200
 8000f7c:	20000000 	.word	0x20000000
 8000f80:	20000010 	.word	0x20000010

08000f84 <__errno>:
 8000f84:	4b01      	ldr	r3, [pc, #4]	; (8000f8c <__errno+0x8>)
 8000f86:	6818      	ldr	r0, [r3, #0]
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000014 	.word	0x20000014

08000f90 <__libc_init_array>:
 8000f90:	b570      	push	{r4, r5, r6, lr}
 8000f92:	4e0d      	ldr	r6, [pc, #52]	; (8000fc8 <__libc_init_array+0x38>)
 8000f94:	4c0d      	ldr	r4, [pc, #52]	; (8000fcc <__libc_init_array+0x3c>)
 8000f96:	1ba4      	subs	r4, r4, r6
 8000f98:	10a4      	asrs	r4, r4, #2
 8000f9a:	2500      	movs	r5, #0
 8000f9c:	42a5      	cmp	r5, r4
 8000f9e:	d109      	bne.n	8000fb4 <__libc_init_array+0x24>
 8000fa0:	4e0b      	ldr	r6, [pc, #44]	; (8000fd0 <__libc_init_array+0x40>)
 8000fa2:	4c0c      	ldr	r4, [pc, #48]	; (8000fd4 <__libc_init_array+0x44>)
 8000fa4:	f001 fa10 	bl	80023c8 <_init>
 8000fa8:	1ba4      	subs	r4, r4, r6
 8000faa:	10a4      	asrs	r4, r4, #2
 8000fac:	2500      	movs	r5, #0
 8000fae:	42a5      	cmp	r5, r4
 8000fb0:	d105      	bne.n	8000fbe <__libc_init_array+0x2e>
 8000fb2:	bd70      	pop	{r4, r5, r6, pc}
 8000fb4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fb8:	4798      	blx	r3
 8000fba:	3501      	adds	r5, #1
 8000fbc:	e7ee      	b.n	8000f9c <__libc_init_array+0xc>
 8000fbe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fc2:	4798      	blx	r3
 8000fc4:	3501      	adds	r5, #1
 8000fc6:	e7f2      	b.n	8000fae <__libc_init_array+0x1e>
 8000fc8:	080024b8 	.word	0x080024b8
 8000fcc:	080024b8 	.word	0x080024b8
 8000fd0:	080024b8 	.word	0x080024b8
 8000fd4:	080024bc 	.word	0x080024bc

08000fd8 <memset>:
 8000fd8:	4402      	add	r2, r0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d100      	bne.n	8000fe2 <memset+0xa>
 8000fe0:	4770      	bx	lr
 8000fe2:	f803 1b01 	strb.w	r1, [r3], #1
 8000fe6:	e7f9      	b.n	8000fdc <memset+0x4>

08000fe8 <iprintf>:
 8000fe8:	b40f      	push	{r0, r1, r2, r3}
 8000fea:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <iprintf+0x2c>)
 8000fec:	b513      	push	{r0, r1, r4, lr}
 8000fee:	681c      	ldr	r4, [r3, #0]
 8000ff0:	b124      	cbz	r4, 8000ffc <iprintf+0x14>
 8000ff2:	69a3      	ldr	r3, [r4, #24]
 8000ff4:	b913      	cbnz	r3, 8000ffc <iprintf+0x14>
 8000ff6:	4620      	mov	r0, r4
 8000ff8:	f000 fa22 	bl	8001440 <__sinit>
 8000ffc:	ab05      	add	r3, sp, #20
 8000ffe:	9a04      	ldr	r2, [sp, #16]
 8001000:	68a1      	ldr	r1, [r4, #8]
 8001002:	9301      	str	r3, [sp, #4]
 8001004:	4620      	mov	r0, r4
 8001006:	f000 fbdb 	bl	80017c0 <_vfiprintf_r>
 800100a:	b002      	add	sp, #8
 800100c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001010:	b004      	add	sp, #16
 8001012:	4770      	bx	lr
 8001014:	20000014 	.word	0x20000014

08001018 <_puts_r>:
 8001018:	b570      	push	{r4, r5, r6, lr}
 800101a:	460e      	mov	r6, r1
 800101c:	4605      	mov	r5, r0
 800101e:	b118      	cbz	r0, 8001028 <_puts_r+0x10>
 8001020:	6983      	ldr	r3, [r0, #24]
 8001022:	b90b      	cbnz	r3, 8001028 <_puts_r+0x10>
 8001024:	f000 fa0c 	bl	8001440 <__sinit>
 8001028:	69ab      	ldr	r3, [r5, #24]
 800102a:	68ac      	ldr	r4, [r5, #8]
 800102c:	b913      	cbnz	r3, 8001034 <_puts_r+0x1c>
 800102e:	4628      	mov	r0, r5
 8001030:	f000 fa06 	bl	8001440 <__sinit>
 8001034:	4b23      	ldr	r3, [pc, #140]	; (80010c4 <_puts_r+0xac>)
 8001036:	429c      	cmp	r4, r3
 8001038:	d117      	bne.n	800106a <_puts_r+0x52>
 800103a:	686c      	ldr	r4, [r5, #4]
 800103c:	89a3      	ldrh	r3, [r4, #12]
 800103e:	071b      	lsls	r3, r3, #28
 8001040:	d51d      	bpl.n	800107e <_puts_r+0x66>
 8001042:	6923      	ldr	r3, [r4, #16]
 8001044:	b1db      	cbz	r3, 800107e <_puts_r+0x66>
 8001046:	3e01      	subs	r6, #1
 8001048:	68a3      	ldr	r3, [r4, #8]
 800104a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800104e:	3b01      	subs	r3, #1
 8001050:	60a3      	str	r3, [r4, #8]
 8001052:	b9e9      	cbnz	r1, 8001090 <_puts_r+0x78>
 8001054:	2b00      	cmp	r3, #0
 8001056:	da2e      	bge.n	80010b6 <_puts_r+0x9e>
 8001058:	4622      	mov	r2, r4
 800105a:	210a      	movs	r1, #10
 800105c:	4628      	mov	r0, r5
 800105e:	f000 f83f 	bl	80010e0 <__swbuf_r>
 8001062:	3001      	adds	r0, #1
 8001064:	d011      	beq.n	800108a <_puts_r+0x72>
 8001066:	200a      	movs	r0, #10
 8001068:	e011      	b.n	800108e <_puts_r+0x76>
 800106a:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <_puts_r+0xb0>)
 800106c:	429c      	cmp	r4, r3
 800106e:	d101      	bne.n	8001074 <_puts_r+0x5c>
 8001070:	68ac      	ldr	r4, [r5, #8]
 8001072:	e7e3      	b.n	800103c <_puts_r+0x24>
 8001074:	4b15      	ldr	r3, [pc, #84]	; (80010cc <_puts_r+0xb4>)
 8001076:	429c      	cmp	r4, r3
 8001078:	bf08      	it	eq
 800107a:	68ec      	ldreq	r4, [r5, #12]
 800107c:	e7de      	b.n	800103c <_puts_r+0x24>
 800107e:	4621      	mov	r1, r4
 8001080:	4628      	mov	r0, r5
 8001082:	f000 f87f 	bl	8001184 <__swsetup_r>
 8001086:	2800      	cmp	r0, #0
 8001088:	d0dd      	beq.n	8001046 <_puts_r+0x2e>
 800108a:	f04f 30ff 	mov.w	r0, #4294967295
 800108e:	bd70      	pop	{r4, r5, r6, pc}
 8001090:	2b00      	cmp	r3, #0
 8001092:	da04      	bge.n	800109e <_puts_r+0x86>
 8001094:	69a2      	ldr	r2, [r4, #24]
 8001096:	429a      	cmp	r2, r3
 8001098:	dc06      	bgt.n	80010a8 <_puts_r+0x90>
 800109a:	290a      	cmp	r1, #10
 800109c:	d004      	beq.n	80010a8 <_puts_r+0x90>
 800109e:	6823      	ldr	r3, [r4, #0]
 80010a0:	1c5a      	adds	r2, r3, #1
 80010a2:	6022      	str	r2, [r4, #0]
 80010a4:	7019      	strb	r1, [r3, #0]
 80010a6:	e7cf      	b.n	8001048 <_puts_r+0x30>
 80010a8:	4622      	mov	r2, r4
 80010aa:	4628      	mov	r0, r5
 80010ac:	f000 f818 	bl	80010e0 <__swbuf_r>
 80010b0:	3001      	adds	r0, #1
 80010b2:	d1c9      	bne.n	8001048 <_puts_r+0x30>
 80010b4:	e7e9      	b.n	800108a <_puts_r+0x72>
 80010b6:	6823      	ldr	r3, [r4, #0]
 80010b8:	200a      	movs	r0, #10
 80010ba:	1c5a      	adds	r2, r3, #1
 80010bc:	6022      	str	r2, [r4, #0]
 80010be:	7018      	strb	r0, [r3, #0]
 80010c0:	e7e5      	b.n	800108e <_puts_r+0x76>
 80010c2:	bf00      	nop
 80010c4:	08002428 	.word	0x08002428
 80010c8:	08002448 	.word	0x08002448
 80010cc:	08002408 	.word	0x08002408

080010d0 <puts>:
 80010d0:	4b02      	ldr	r3, [pc, #8]	; (80010dc <puts+0xc>)
 80010d2:	4601      	mov	r1, r0
 80010d4:	6818      	ldr	r0, [r3, #0]
 80010d6:	f7ff bf9f 	b.w	8001018 <_puts_r>
 80010da:	bf00      	nop
 80010dc:	20000014 	.word	0x20000014

080010e0 <__swbuf_r>:
 80010e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010e2:	460e      	mov	r6, r1
 80010e4:	4614      	mov	r4, r2
 80010e6:	4605      	mov	r5, r0
 80010e8:	b118      	cbz	r0, 80010f2 <__swbuf_r+0x12>
 80010ea:	6983      	ldr	r3, [r0, #24]
 80010ec:	b90b      	cbnz	r3, 80010f2 <__swbuf_r+0x12>
 80010ee:	f000 f9a7 	bl	8001440 <__sinit>
 80010f2:	4b21      	ldr	r3, [pc, #132]	; (8001178 <__swbuf_r+0x98>)
 80010f4:	429c      	cmp	r4, r3
 80010f6:	d12a      	bne.n	800114e <__swbuf_r+0x6e>
 80010f8:	686c      	ldr	r4, [r5, #4]
 80010fa:	69a3      	ldr	r3, [r4, #24]
 80010fc:	60a3      	str	r3, [r4, #8]
 80010fe:	89a3      	ldrh	r3, [r4, #12]
 8001100:	071a      	lsls	r2, r3, #28
 8001102:	d52e      	bpl.n	8001162 <__swbuf_r+0x82>
 8001104:	6923      	ldr	r3, [r4, #16]
 8001106:	b363      	cbz	r3, 8001162 <__swbuf_r+0x82>
 8001108:	6923      	ldr	r3, [r4, #16]
 800110a:	6820      	ldr	r0, [r4, #0]
 800110c:	1ac0      	subs	r0, r0, r3
 800110e:	6963      	ldr	r3, [r4, #20]
 8001110:	b2f6      	uxtb	r6, r6
 8001112:	4283      	cmp	r3, r0
 8001114:	4637      	mov	r7, r6
 8001116:	dc04      	bgt.n	8001122 <__swbuf_r+0x42>
 8001118:	4621      	mov	r1, r4
 800111a:	4628      	mov	r0, r5
 800111c:	f000 f926 	bl	800136c <_fflush_r>
 8001120:	bb28      	cbnz	r0, 800116e <__swbuf_r+0x8e>
 8001122:	68a3      	ldr	r3, [r4, #8]
 8001124:	3b01      	subs	r3, #1
 8001126:	60a3      	str	r3, [r4, #8]
 8001128:	6823      	ldr	r3, [r4, #0]
 800112a:	1c5a      	adds	r2, r3, #1
 800112c:	6022      	str	r2, [r4, #0]
 800112e:	701e      	strb	r6, [r3, #0]
 8001130:	6963      	ldr	r3, [r4, #20]
 8001132:	3001      	adds	r0, #1
 8001134:	4283      	cmp	r3, r0
 8001136:	d004      	beq.n	8001142 <__swbuf_r+0x62>
 8001138:	89a3      	ldrh	r3, [r4, #12]
 800113a:	07db      	lsls	r3, r3, #31
 800113c:	d519      	bpl.n	8001172 <__swbuf_r+0x92>
 800113e:	2e0a      	cmp	r6, #10
 8001140:	d117      	bne.n	8001172 <__swbuf_r+0x92>
 8001142:	4621      	mov	r1, r4
 8001144:	4628      	mov	r0, r5
 8001146:	f000 f911 	bl	800136c <_fflush_r>
 800114a:	b190      	cbz	r0, 8001172 <__swbuf_r+0x92>
 800114c:	e00f      	b.n	800116e <__swbuf_r+0x8e>
 800114e:	4b0b      	ldr	r3, [pc, #44]	; (800117c <__swbuf_r+0x9c>)
 8001150:	429c      	cmp	r4, r3
 8001152:	d101      	bne.n	8001158 <__swbuf_r+0x78>
 8001154:	68ac      	ldr	r4, [r5, #8]
 8001156:	e7d0      	b.n	80010fa <__swbuf_r+0x1a>
 8001158:	4b09      	ldr	r3, [pc, #36]	; (8001180 <__swbuf_r+0xa0>)
 800115a:	429c      	cmp	r4, r3
 800115c:	bf08      	it	eq
 800115e:	68ec      	ldreq	r4, [r5, #12]
 8001160:	e7cb      	b.n	80010fa <__swbuf_r+0x1a>
 8001162:	4621      	mov	r1, r4
 8001164:	4628      	mov	r0, r5
 8001166:	f000 f80d 	bl	8001184 <__swsetup_r>
 800116a:	2800      	cmp	r0, #0
 800116c:	d0cc      	beq.n	8001108 <__swbuf_r+0x28>
 800116e:	f04f 37ff 	mov.w	r7, #4294967295
 8001172:	4638      	mov	r0, r7
 8001174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001176:	bf00      	nop
 8001178:	08002428 	.word	0x08002428
 800117c:	08002448 	.word	0x08002448
 8001180:	08002408 	.word	0x08002408

08001184 <__swsetup_r>:
 8001184:	4b32      	ldr	r3, [pc, #200]	; (8001250 <__swsetup_r+0xcc>)
 8001186:	b570      	push	{r4, r5, r6, lr}
 8001188:	681d      	ldr	r5, [r3, #0]
 800118a:	4606      	mov	r6, r0
 800118c:	460c      	mov	r4, r1
 800118e:	b125      	cbz	r5, 800119a <__swsetup_r+0x16>
 8001190:	69ab      	ldr	r3, [r5, #24]
 8001192:	b913      	cbnz	r3, 800119a <__swsetup_r+0x16>
 8001194:	4628      	mov	r0, r5
 8001196:	f000 f953 	bl	8001440 <__sinit>
 800119a:	4b2e      	ldr	r3, [pc, #184]	; (8001254 <__swsetup_r+0xd0>)
 800119c:	429c      	cmp	r4, r3
 800119e:	d10f      	bne.n	80011c0 <__swsetup_r+0x3c>
 80011a0:	686c      	ldr	r4, [r5, #4]
 80011a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	0715      	lsls	r5, r2, #28
 80011aa:	d42c      	bmi.n	8001206 <__swsetup_r+0x82>
 80011ac:	06d0      	lsls	r0, r2, #27
 80011ae:	d411      	bmi.n	80011d4 <__swsetup_r+0x50>
 80011b0:	2209      	movs	r2, #9
 80011b2:	6032      	str	r2, [r6, #0]
 80011b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011b8:	81a3      	strh	r3, [r4, #12]
 80011ba:	f04f 30ff 	mov.w	r0, #4294967295
 80011be:	e03e      	b.n	800123e <__swsetup_r+0xba>
 80011c0:	4b25      	ldr	r3, [pc, #148]	; (8001258 <__swsetup_r+0xd4>)
 80011c2:	429c      	cmp	r4, r3
 80011c4:	d101      	bne.n	80011ca <__swsetup_r+0x46>
 80011c6:	68ac      	ldr	r4, [r5, #8]
 80011c8:	e7eb      	b.n	80011a2 <__swsetup_r+0x1e>
 80011ca:	4b24      	ldr	r3, [pc, #144]	; (800125c <__swsetup_r+0xd8>)
 80011cc:	429c      	cmp	r4, r3
 80011ce:	bf08      	it	eq
 80011d0:	68ec      	ldreq	r4, [r5, #12]
 80011d2:	e7e6      	b.n	80011a2 <__swsetup_r+0x1e>
 80011d4:	0751      	lsls	r1, r2, #29
 80011d6:	d512      	bpl.n	80011fe <__swsetup_r+0x7a>
 80011d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80011da:	b141      	cbz	r1, 80011ee <__swsetup_r+0x6a>
 80011dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80011e0:	4299      	cmp	r1, r3
 80011e2:	d002      	beq.n	80011ea <__swsetup_r+0x66>
 80011e4:	4630      	mov	r0, r6
 80011e6:	f000 fa19 	bl	800161c <_free_r>
 80011ea:	2300      	movs	r3, #0
 80011ec:	6363      	str	r3, [r4, #52]	; 0x34
 80011ee:	89a3      	ldrh	r3, [r4, #12]
 80011f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80011f4:	81a3      	strh	r3, [r4, #12]
 80011f6:	2300      	movs	r3, #0
 80011f8:	6063      	str	r3, [r4, #4]
 80011fa:	6923      	ldr	r3, [r4, #16]
 80011fc:	6023      	str	r3, [r4, #0]
 80011fe:	89a3      	ldrh	r3, [r4, #12]
 8001200:	f043 0308 	orr.w	r3, r3, #8
 8001204:	81a3      	strh	r3, [r4, #12]
 8001206:	6923      	ldr	r3, [r4, #16]
 8001208:	b94b      	cbnz	r3, 800121e <__swsetup_r+0x9a>
 800120a:	89a3      	ldrh	r3, [r4, #12]
 800120c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001214:	d003      	beq.n	800121e <__swsetup_r+0x9a>
 8001216:	4621      	mov	r1, r4
 8001218:	4630      	mov	r0, r6
 800121a:	f000 f9bf 	bl	800159c <__smakebuf_r>
 800121e:	89a2      	ldrh	r2, [r4, #12]
 8001220:	f012 0301 	ands.w	r3, r2, #1
 8001224:	d00c      	beq.n	8001240 <__swsetup_r+0xbc>
 8001226:	2300      	movs	r3, #0
 8001228:	60a3      	str	r3, [r4, #8]
 800122a:	6963      	ldr	r3, [r4, #20]
 800122c:	425b      	negs	r3, r3
 800122e:	61a3      	str	r3, [r4, #24]
 8001230:	6923      	ldr	r3, [r4, #16]
 8001232:	b953      	cbnz	r3, 800124a <__swsetup_r+0xc6>
 8001234:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001238:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800123c:	d1ba      	bne.n	80011b4 <__swsetup_r+0x30>
 800123e:	bd70      	pop	{r4, r5, r6, pc}
 8001240:	0792      	lsls	r2, r2, #30
 8001242:	bf58      	it	pl
 8001244:	6963      	ldrpl	r3, [r4, #20]
 8001246:	60a3      	str	r3, [r4, #8]
 8001248:	e7f2      	b.n	8001230 <__swsetup_r+0xac>
 800124a:	2000      	movs	r0, #0
 800124c:	e7f7      	b.n	800123e <__swsetup_r+0xba>
 800124e:	bf00      	nop
 8001250:	20000014 	.word	0x20000014
 8001254:	08002428 	.word	0x08002428
 8001258:	08002448 	.word	0x08002448
 800125c:	08002408 	.word	0x08002408

08001260 <__sflush_r>:
 8001260:	898a      	ldrh	r2, [r1, #12]
 8001262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001266:	4605      	mov	r5, r0
 8001268:	0710      	lsls	r0, r2, #28
 800126a:	460c      	mov	r4, r1
 800126c:	d458      	bmi.n	8001320 <__sflush_r+0xc0>
 800126e:	684b      	ldr	r3, [r1, #4]
 8001270:	2b00      	cmp	r3, #0
 8001272:	dc05      	bgt.n	8001280 <__sflush_r+0x20>
 8001274:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001276:	2b00      	cmp	r3, #0
 8001278:	dc02      	bgt.n	8001280 <__sflush_r+0x20>
 800127a:	2000      	movs	r0, #0
 800127c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001280:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001282:	2e00      	cmp	r6, #0
 8001284:	d0f9      	beq.n	800127a <__sflush_r+0x1a>
 8001286:	2300      	movs	r3, #0
 8001288:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800128c:	682f      	ldr	r7, [r5, #0]
 800128e:	6a21      	ldr	r1, [r4, #32]
 8001290:	602b      	str	r3, [r5, #0]
 8001292:	d032      	beq.n	80012fa <__sflush_r+0x9a>
 8001294:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001296:	89a3      	ldrh	r3, [r4, #12]
 8001298:	075a      	lsls	r2, r3, #29
 800129a:	d505      	bpl.n	80012a8 <__sflush_r+0x48>
 800129c:	6863      	ldr	r3, [r4, #4]
 800129e:	1ac0      	subs	r0, r0, r3
 80012a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80012a2:	b10b      	cbz	r3, 80012a8 <__sflush_r+0x48>
 80012a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012a6:	1ac0      	subs	r0, r0, r3
 80012a8:	2300      	movs	r3, #0
 80012aa:	4602      	mov	r2, r0
 80012ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012ae:	6a21      	ldr	r1, [r4, #32]
 80012b0:	4628      	mov	r0, r5
 80012b2:	47b0      	blx	r6
 80012b4:	1c43      	adds	r3, r0, #1
 80012b6:	89a3      	ldrh	r3, [r4, #12]
 80012b8:	d106      	bne.n	80012c8 <__sflush_r+0x68>
 80012ba:	6829      	ldr	r1, [r5, #0]
 80012bc:	291d      	cmp	r1, #29
 80012be:	d848      	bhi.n	8001352 <__sflush_r+0xf2>
 80012c0:	4a29      	ldr	r2, [pc, #164]	; (8001368 <__sflush_r+0x108>)
 80012c2:	40ca      	lsrs	r2, r1
 80012c4:	07d6      	lsls	r6, r2, #31
 80012c6:	d544      	bpl.n	8001352 <__sflush_r+0xf2>
 80012c8:	2200      	movs	r2, #0
 80012ca:	6062      	str	r2, [r4, #4]
 80012cc:	04d9      	lsls	r1, r3, #19
 80012ce:	6922      	ldr	r2, [r4, #16]
 80012d0:	6022      	str	r2, [r4, #0]
 80012d2:	d504      	bpl.n	80012de <__sflush_r+0x7e>
 80012d4:	1c42      	adds	r2, r0, #1
 80012d6:	d101      	bne.n	80012dc <__sflush_r+0x7c>
 80012d8:	682b      	ldr	r3, [r5, #0]
 80012da:	b903      	cbnz	r3, 80012de <__sflush_r+0x7e>
 80012dc:	6560      	str	r0, [r4, #84]	; 0x54
 80012de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80012e0:	602f      	str	r7, [r5, #0]
 80012e2:	2900      	cmp	r1, #0
 80012e4:	d0c9      	beq.n	800127a <__sflush_r+0x1a>
 80012e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80012ea:	4299      	cmp	r1, r3
 80012ec:	d002      	beq.n	80012f4 <__sflush_r+0x94>
 80012ee:	4628      	mov	r0, r5
 80012f0:	f000 f994 	bl	800161c <_free_r>
 80012f4:	2000      	movs	r0, #0
 80012f6:	6360      	str	r0, [r4, #52]	; 0x34
 80012f8:	e7c0      	b.n	800127c <__sflush_r+0x1c>
 80012fa:	2301      	movs	r3, #1
 80012fc:	4628      	mov	r0, r5
 80012fe:	47b0      	blx	r6
 8001300:	1c41      	adds	r1, r0, #1
 8001302:	d1c8      	bne.n	8001296 <__sflush_r+0x36>
 8001304:	682b      	ldr	r3, [r5, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0c5      	beq.n	8001296 <__sflush_r+0x36>
 800130a:	2b1d      	cmp	r3, #29
 800130c:	d001      	beq.n	8001312 <__sflush_r+0xb2>
 800130e:	2b16      	cmp	r3, #22
 8001310:	d101      	bne.n	8001316 <__sflush_r+0xb6>
 8001312:	602f      	str	r7, [r5, #0]
 8001314:	e7b1      	b.n	800127a <__sflush_r+0x1a>
 8001316:	89a3      	ldrh	r3, [r4, #12]
 8001318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800131c:	81a3      	strh	r3, [r4, #12]
 800131e:	e7ad      	b.n	800127c <__sflush_r+0x1c>
 8001320:	690f      	ldr	r7, [r1, #16]
 8001322:	2f00      	cmp	r7, #0
 8001324:	d0a9      	beq.n	800127a <__sflush_r+0x1a>
 8001326:	0793      	lsls	r3, r2, #30
 8001328:	680e      	ldr	r6, [r1, #0]
 800132a:	bf08      	it	eq
 800132c:	694b      	ldreq	r3, [r1, #20]
 800132e:	600f      	str	r7, [r1, #0]
 8001330:	bf18      	it	ne
 8001332:	2300      	movne	r3, #0
 8001334:	eba6 0807 	sub.w	r8, r6, r7
 8001338:	608b      	str	r3, [r1, #8]
 800133a:	f1b8 0f00 	cmp.w	r8, #0
 800133e:	dd9c      	ble.n	800127a <__sflush_r+0x1a>
 8001340:	4643      	mov	r3, r8
 8001342:	463a      	mov	r2, r7
 8001344:	6a21      	ldr	r1, [r4, #32]
 8001346:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001348:	4628      	mov	r0, r5
 800134a:	47b0      	blx	r6
 800134c:	2800      	cmp	r0, #0
 800134e:	dc06      	bgt.n	800135e <__sflush_r+0xfe>
 8001350:	89a3      	ldrh	r3, [r4, #12]
 8001352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001356:	81a3      	strh	r3, [r4, #12]
 8001358:	f04f 30ff 	mov.w	r0, #4294967295
 800135c:	e78e      	b.n	800127c <__sflush_r+0x1c>
 800135e:	4407      	add	r7, r0
 8001360:	eba8 0800 	sub.w	r8, r8, r0
 8001364:	e7e9      	b.n	800133a <__sflush_r+0xda>
 8001366:	bf00      	nop
 8001368:	20400001 	.word	0x20400001

0800136c <_fflush_r>:
 800136c:	b538      	push	{r3, r4, r5, lr}
 800136e:	690b      	ldr	r3, [r1, #16]
 8001370:	4605      	mov	r5, r0
 8001372:	460c      	mov	r4, r1
 8001374:	b1db      	cbz	r3, 80013ae <_fflush_r+0x42>
 8001376:	b118      	cbz	r0, 8001380 <_fflush_r+0x14>
 8001378:	6983      	ldr	r3, [r0, #24]
 800137a:	b90b      	cbnz	r3, 8001380 <_fflush_r+0x14>
 800137c:	f000 f860 	bl	8001440 <__sinit>
 8001380:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <_fflush_r+0x48>)
 8001382:	429c      	cmp	r4, r3
 8001384:	d109      	bne.n	800139a <_fflush_r+0x2e>
 8001386:	686c      	ldr	r4, [r5, #4]
 8001388:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800138c:	b17b      	cbz	r3, 80013ae <_fflush_r+0x42>
 800138e:	4621      	mov	r1, r4
 8001390:	4628      	mov	r0, r5
 8001392:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001396:	f7ff bf63 	b.w	8001260 <__sflush_r>
 800139a:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <_fflush_r+0x4c>)
 800139c:	429c      	cmp	r4, r3
 800139e:	d101      	bne.n	80013a4 <_fflush_r+0x38>
 80013a0:	68ac      	ldr	r4, [r5, #8]
 80013a2:	e7f1      	b.n	8001388 <_fflush_r+0x1c>
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <_fflush_r+0x50>)
 80013a6:	429c      	cmp	r4, r3
 80013a8:	bf08      	it	eq
 80013aa:	68ec      	ldreq	r4, [r5, #12]
 80013ac:	e7ec      	b.n	8001388 <_fflush_r+0x1c>
 80013ae:	2000      	movs	r0, #0
 80013b0:	bd38      	pop	{r3, r4, r5, pc}
 80013b2:	bf00      	nop
 80013b4:	08002428 	.word	0x08002428
 80013b8:	08002448 	.word	0x08002448
 80013bc:	08002408 	.word	0x08002408

080013c0 <std>:
 80013c0:	2300      	movs	r3, #0
 80013c2:	b510      	push	{r4, lr}
 80013c4:	4604      	mov	r4, r0
 80013c6:	e9c0 3300 	strd	r3, r3, [r0]
 80013ca:	6083      	str	r3, [r0, #8]
 80013cc:	8181      	strh	r1, [r0, #12]
 80013ce:	6643      	str	r3, [r0, #100]	; 0x64
 80013d0:	81c2      	strh	r2, [r0, #14]
 80013d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80013d6:	6183      	str	r3, [r0, #24]
 80013d8:	4619      	mov	r1, r3
 80013da:	2208      	movs	r2, #8
 80013dc:	305c      	adds	r0, #92	; 0x5c
 80013de:	f7ff fdfb 	bl	8000fd8 <memset>
 80013e2:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <std+0x38>)
 80013e4:	6263      	str	r3, [r4, #36]	; 0x24
 80013e6:	4b05      	ldr	r3, [pc, #20]	; (80013fc <std+0x3c>)
 80013e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80013ea:	4b05      	ldr	r3, [pc, #20]	; (8001400 <std+0x40>)
 80013ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80013ee:	4b05      	ldr	r3, [pc, #20]	; (8001404 <std+0x44>)
 80013f0:	6224      	str	r4, [r4, #32]
 80013f2:	6323      	str	r3, [r4, #48]	; 0x30
 80013f4:	bd10      	pop	{r4, pc}
 80013f6:	bf00      	nop
 80013f8:	08001d1d 	.word	0x08001d1d
 80013fc:	08001d3f 	.word	0x08001d3f
 8001400:	08001d77 	.word	0x08001d77
 8001404:	08001d9b 	.word	0x08001d9b

08001408 <_cleanup_r>:
 8001408:	4901      	ldr	r1, [pc, #4]	; (8001410 <_cleanup_r+0x8>)
 800140a:	f000 b885 	b.w	8001518 <_fwalk_reent>
 800140e:	bf00      	nop
 8001410:	0800136d 	.word	0x0800136d

08001414 <__sfmoreglue>:
 8001414:	b570      	push	{r4, r5, r6, lr}
 8001416:	1e4a      	subs	r2, r1, #1
 8001418:	2568      	movs	r5, #104	; 0x68
 800141a:	4355      	muls	r5, r2
 800141c:	460e      	mov	r6, r1
 800141e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001422:	f000 f949 	bl	80016b8 <_malloc_r>
 8001426:	4604      	mov	r4, r0
 8001428:	b140      	cbz	r0, 800143c <__sfmoreglue+0x28>
 800142a:	2100      	movs	r1, #0
 800142c:	e9c0 1600 	strd	r1, r6, [r0]
 8001430:	300c      	adds	r0, #12
 8001432:	60a0      	str	r0, [r4, #8]
 8001434:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001438:	f7ff fdce 	bl	8000fd8 <memset>
 800143c:	4620      	mov	r0, r4
 800143e:	bd70      	pop	{r4, r5, r6, pc}

08001440 <__sinit>:
 8001440:	6983      	ldr	r3, [r0, #24]
 8001442:	b510      	push	{r4, lr}
 8001444:	4604      	mov	r4, r0
 8001446:	bb33      	cbnz	r3, 8001496 <__sinit+0x56>
 8001448:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800144c:	6503      	str	r3, [r0, #80]	; 0x50
 800144e:	4b12      	ldr	r3, [pc, #72]	; (8001498 <__sinit+0x58>)
 8001450:	4a12      	ldr	r2, [pc, #72]	; (800149c <__sinit+0x5c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6282      	str	r2, [r0, #40]	; 0x28
 8001456:	4298      	cmp	r0, r3
 8001458:	bf04      	itt	eq
 800145a:	2301      	moveq	r3, #1
 800145c:	6183      	streq	r3, [r0, #24]
 800145e:	f000 f81f 	bl	80014a0 <__sfp>
 8001462:	6060      	str	r0, [r4, #4]
 8001464:	4620      	mov	r0, r4
 8001466:	f000 f81b 	bl	80014a0 <__sfp>
 800146a:	60a0      	str	r0, [r4, #8]
 800146c:	4620      	mov	r0, r4
 800146e:	f000 f817 	bl	80014a0 <__sfp>
 8001472:	2200      	movs	r2, #0
 8001474:	60e0      	str	r0, [r4, #12]
 8001476:	2104      	movs	r1, #4
 8001478:	6860      	ldr	r0, [r4, #4]
 800147a:	f7ff ffa1 	bl	80013c0 <std>
 800147e:	2201      	movs	r2, #1
 8001480:	2109      	movs	r1, #9
 8001482:	68a0      	ldr	r0, [r4, #8]
 8001484:	f7ff ff9c 	bl	80013c0 <std>
 8001488:	2202      	movs	r2, #2
 800148a:	2112      	movs	r1, #18
 800148c:	68e0      	ldr	r0, [r4, #12]
 800148e:	f7ff ff97 	bl	80013c0 <std>
 8001492:	2301      	movs	r3, #1
 8001494:	61a3      	str	r3, [r4, #24]
 8001496:	bd10      	pop	{r4, pc}
 8001498:	08002404 	.word	0x08002404
 800149c:	08001409 	.word	0x08001409

080014a0 <__sfp>:
 80014a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014a2:	4b1b      	ldr	r3, [pc, #108]	; (8001510 <__sfp+0x70>)
 80014a4:	681e      	ldr	r6, [r3, #0]
 80014a6:	69b3      	ldr	r3, [r6, #24]
 80014a8:	4607      	mov	r7, r0
 80014aa:	b913      	cbnz	r3, 80014b2 <__sfp+0x12>
 80014ac:	4630      	mov	r0, r6
 80014ae:	f7ff ffc7 	bl	8001440 <__sinit>
 80014b2:	3648      	adds	r6, #72	; 0x48
 80014b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80014b8:	3b01      	subs	r3, #1
 80014ba:	d503      	bpl.n	80014c4 <__sfp+0x24>
 80014bc:	6833      	ldr	r3, [r6, #0]
 80014be:	b133      	cbz	r3, 80014ce <__sfp+0x2e>
 80014c0:	6836      	ldr	r6, [r6, #0]
 80014c2:	e7f7      	b.n	80014b4 <__sfp+0x14>
 80014c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80014c8:	b16d      	cbz	r5, 80014e6 <__sfp+0x46>
 80014ca:	3468      	adds	r4, #104	; 0x68
 80014cc:	e7f4      	b.n	80014b8 <__sfp+0x18>
 80014ce:	2104      	movs	r1, #4
 80014d0:	4638      	mov	r0, r7
 80014d2:	f7ff ff9f 	bl	8001414 <__sfmoreglue>
 80014d6:	6030      	str	r0, [r6, #0]
 80014d8:	2800      	cmp	r0, #0
 80014da:	d1f1      	bne.n	80014c0 <__sfp+0x20>
 80014dc:	230c      	movs	r3, #12
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	4604      	mov	r4, r0
 80014e2:	4620      	mov	r0, r4
 80014e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014e6:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <__sfp+0x74>)
 80014e8:	6665      	str	r5, [r4, #100]	; 0x64
 80014ea:	e9c4 5500 	strd	r5, r5, [r4]
 80014ee:	60a5      	str	r5, [r4, #8]
 80014f0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80014f4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80014f8:	2208      	movs	r2, #8
 80014fa:	4629      	mov	r1, r5
 80014fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001500:	f7ff fd6a 	bl	8000fd8 <memset>
 8001504:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001508:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800150c:	e7e9      	b.n	80014e2 <__sfp+0x42>
 800150e:	bf00      	nop
 8001510:	08002404 	.word	0x08002404
 8001514:	ffff0001 	.word	0xffff0001

08001518 <_fwalk_reent>:
 8001518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800151c:	4680      	mov	r8, r0
 800151e:	4689      	mov	r9, r1
 8001520:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001524:	2600      	movs	r6, #0
 8001526:	b914      	cbnz	r4, 800152e <_fwalk_reent+0x16>
 8001528:	4630      	mov	r0, r6
 800152a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800152e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001532:	3f01      	subs	r7, #1
 8001534:	d501      	bpl.n	800153a <_fwalk_reent+0x22>
 8001536:	6824      	ldr	r4, [r4, #0]
 8001538:	e7f5      	b.n	8001526 <_fwalk_reent+0xe>
 800153a:	89ab      	ldrh	r3, [r5, #12]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d907      	bls.n	8001550 <_fwalk_reent+0x38>
 8001540:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001544:	3301      	adds	r3, #1
 8001546:	d003      	beq.n	8001550 <_fwalk_reent+0x38>
 8001548:	4629      	mov	r1, r5
 800154a:	4640      	mov	r0, r8
 800154c:	47c8      	blx	r9
 800154e:	4306      	orrs	r6, r0
 8001550:	3568      	adds	r5, #104	; 0x68
 8001552:	e7ee      	b.n	8001532 <_fwalk_reent+0x1a>

08001554 <__swhatbuf_r>:
 8001554:	b570      	push	{r4, r5, r6, lr}
 8001556:	460e      	mov	r6, r1
 8001558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800155c:	2900      	cmp	r1, #0
 800155e:	b096      	sub	sp, #88	; 0x58
 8001560:	4614      	mov	r4, r2
 8001562:	461d      	mov	r5, r3
 8001564:	da07      	bge.n	8001576 <__swhatbuf_r+0x22>
 8001566:	2300      	movs	r3, #0
 8001568:	602b      	str	r3, [r5, #0]
 800156a:	89b3      	ldrh	r3, [r6, #12]
 800156c:	061a      	lsls	r2, r3, #24
 800156e:	d410      	bmi.n	8001592 <__swhatbuf_r+0x3e>
 8001570:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001574:	e00e      	b.n	8001594 <__swhatbuf_r+0x40>
 8001576:	466a      	mov	r2, sp
 8001578:	f000 fc36 	bl	8001de8 <_fstat_r>
 800157c:	2800      	cmp	r0, #0
 800157e:	dbf2      	blt.n	8001566 <__swhatbuf_r+0x12>
 8001580:	9a01      	ldr	r2, [sp, #4]
 8001582:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001586:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800158a:	425a      	negs	r2, r3
 800158c:	415a      	adcs	r2, r3
 800158e:	602a      	str	r2, [r5, #0]
 8001590:	e7ee      	b.n	8001570 <__swhatbuf_r+0x1c>
 8001592:	2340      	movs	r3, #64	; 0x40
 8001594:	2000      	movs	r0, #0
 8001596:	6023      	str	r3, [r4, #0]
 8001598:	b016      	add	sp, #88	; 0x58
 800159a:	bd70      	pop	{r4, r5, r6, pc}

0800159c <__smakebuf_r>:
 800159c:	898b      	ldrh	r3, [r1, #12]
 800159e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80015a0:	079d      	lsls	r5, r3, #30
 80015a2:	4606      	mov	r6, r0
 80015a4:	460c      	mov	r4, r1
 80015a6:	d507      	bpl.n	80015b8 <__smakebuf_r+0x1c>
 80015a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80015ac:	6023      	str	r3, [r4, #0]
 80015ae:	6123      	str	r3, [r4, #16]
 80015b0:	2301      	movs	r3, #1
 80015b2:	6163      	str	r3, [r4, #20]
 80015b4:	b002      	add	sp, #8
 80015b6:	bd70      	pop	{r4, r5, r6, pc}
 80015b8:	ab01      	add	r3, sp, #4
 80015ba:	466a      	mov	r2, sp
 80015bc:	f7ff ffca 	bl	8001554 <__swhatbuf_r>
 80015c0:	9900      	ldr	r1, [sp, #0]
 80015c2:	4605      	mov	r5, r0
 80015c4:	4630      	mov	r0, r6
 80015c6:	f000 f877 	bl	80016b8 <_malloc_r>
 80015ca:	b948      	cbnz	r0, 80015e0 <__smakebuf_r+0x44>
 80015cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015d0:	059a      	lsls	r2, r3, #22
 80015d2:	d4ef      	bmi.n	80015b4 <__smakebuf_r+0x18>
 80015d4:	f023 0303 	bic.w	r3, r3, #3
 80015d8:	f043 0302 	orr.w	r3, r3, #2
 80015dc:	81a3      	strh	r3, [r4, #12]
 80015de:	e7e3      	b.n	80015a8 <__smakebuf_r+0xc>
 80015e0:	4b0d      	ldr	r3, [pc, #52]	; (8001618 <__smakebuf_r+0x7c>)
 80015e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80015e4:	89a3      	ldrh	r3, [r4, #12]
 80015e6:	6020      	str	r0, [r4, #0]
 80015e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015ec:	81a3      	strh	r3, [r4, #12]
 80015ee:	9b00      	ldr	r3, [sp, #0]
 80015f0:	6163      	str	r3, [r4, #20]
 80015f2:	9b01      	ldr	r3, [sp, #4]
 80015f4:	6120      	str	r0, [r4, #16]
 80015f6:	b15b      	cbz	r3, 8001610 <__smakebuf_r+0x74>
 80015f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80015fc:	4630      	mov	r0, r6
 80015fe:	f000 fc05 	bl	8001e0c <_isatty_r>
 8001602:	b128      	cbz	r0, 8001610 <__smakebuf_r+0x74>
 8001604:	89a3      	ldrh	r3, [r4, #12]
 8001606:	f023 0303 	bic.w	r3, r3, #3
 800160a:	f043 0301 	orr.w	r3, r3, #1
 800160e:	81a3      	strh	r3, [r4, #12]
 8001610:	89a3      	ldrh	r3, [r4, #12]
 8001612:	431d      	orrs	r5, r3
 8001614:	81a5      	strh	r5, [r4, #12]
 8001616:	e7cd      	b.n	80015b4 <__smakebuf_r+0x18>
 8001618:	08001409 	.word	0x08001409

0800161c <_free_r>:
 800161c:	b538      	push	{r3, r4, r5, lr}
 800161e:	4605      	mov	r5, r0
 8001620:	2900      	cmp	r1, #0
 8001622:	d045      	beq.n	80016b0 <_free_r+0x94>
 8001624:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001628:	1f0c      	subs	r4, r1, #4
 800162a:	2b00      	cmp	r3, #0
 800162c:	bfb8      	it	lt
 800162e:	18e4      	addlt	r4, r4, r3
 8001630:	f000 fc0e 	bl	8001e50 <__malloc_lock>
 8001634:	4a1f      	ldr	r2, [pc, #124]	; (80016b4 <_free_r+0x98>)
 8001636:	6813      	ldr	r3, [r2, #0]
 8001638:	4610      	mov	r0, r2
 800163a:	b933      	cbnz	r3, 800164a <_free_r+0x2e>
 800163c:	6063      	str	r3, [r4, #4]
 800163e:	6014      	str	r4, [r2, #0]
 8001640:	4628      	mov	r0, r5
 8001642:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001646:	f000 bc04 	b.w	8001e52 <__malloc_unlock>
 800164a:	42a3      	cmp	r3, r4
 800164c:	d90c      	bls.n	8001668 <_free_r+0x4c>
 800164e:	6821      	ldr	r1, [r4, #0]
 8001650:	1862      	adds	r2, r4, r1
 8001652:	4293      	cmp	r3, r2
 8001654:	bf04      	itt	eq
 8001656:	681a      	ldreq	r2, [r3, #0]
 8001658:	685b      	ldreq	r3, [r3, #4]
 800165a:	6063      	str	r3, [r4, #4]
 800165c:	bf04      	itt	eq
 800165e:	1852      	addeq	r2, r2, r1
 8001660:	6022      	streq	r2, [r4, #0]
 8001662:	6004      	str	r4, [r0, #0]
 8001664:	e7ec      	b.n	8001640 <_free_r+0x24>
 8001666:	4613      	mov	r3, r2
 8001668:	685a      	ldr	r2, [r3, #4]
 800166a:	b10a      	cbz	r2, 8001670 <_free_r+0x54>
 800166c:	42a2      	cmp	r2, r4
 800166e:	d9fa      	bls.n	8001666 <_free_r+0x4a>
 8001670:	6819      	ldr	r1, [r3, #0]
 8001672:	1858      	adds	r0, r3, r1
 8001674:	42a0      	cmp	r0, r4
 8001676:	d10b      	bne.n	8001690 <_free_r+0x74>
 8001678:	6820      	ldr	r0, [r4, #0]
 800167a:	4401      	add	r1, r0
 800167c:	1858      	adds	r0, r3, r1
 800167e:	4282      	cmp	r2, r0
 8001680:	6019      	str	r1, [r3, #0]
 8001682:	d1dd      	bne.n	8001640 <_free_r+0x24>
 8001684:	6810      	ldr	r0, [r2, #0]
 8001686:	6852      	ldr	r2, [r2, #4]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	4401      	add	r1, r0
 800168c:	6019      	str	r1, [r3, #0]
 800168e:	e7d7      	b.n	8001640 <_free_r+0x24>
 8001690:	d902      	bls.n	8001698 <_free_r+0x7c>
 8001692:	230c      	movs	r3, #12
 8001694:	602b      	str	r3, [r5, #0]
 8001696:	e7d3      	b.n	8001640 <_free_r+0x24>
 8001698:	6820      	ldr	r0, [r4, #0]
 800169a:	1821      	adds	r1, r4, r0
 800169c:	428a      	cmp	r2, r1
 800169e:	bf04      	itt	eq
 80016a0:	6811      	ldreq	r1, [r2, #0]
 80016a2:	6852      	ldreq	r2, [r2, #4]
 80016a4:	6062      	str	r2, [r4, #4]
 80016a6:	bf04      	itt	eq
 80016a8:	1809      	addeq	r1, r1, r0
 80016aa:	6021      	streq	r1, [r4, #0]
 80016ac:	605c      	str	r4, [r3, #4]
 80016ae:	e7c7      	b.n	8001640 <_free_r+0x24>
 80016b0:	bd38      	pop	{r3, r4, r5, pc}
 80016b2:	bf00      	nop
 80016b4:	200000a0 	.word	0x200000a0

080016b8 <_malloc_r>:
 80016b8:	b570      	push	{r4, r5, r6, lr}
 80016ba:	1ccd      	adds	r5, r1, #3
 80016bc:	f025 0503 	bic.w	r5, r5, #3
 80016c0:	3508      	adds	r5, #8
 80016c2:	2d0c      	cmp	r5, #12
 80016c4:	bf38      	it	cc
 80016c6:	250c      	movcc	r5, #12
 80016c8:	2d00      	cmp	r5, #0
 80016ca:	4606      	mov	r6, r0
 80016cc:	db01      	blt.n	80016d2 <_malloc_r+0x1a>
 80016ce:	42a9      	cmp	r1, r5
 80016d0:	d903      	bls.n	80016da <_malloc_r+0x22>
 80016d2:	230c      	movs	r3, #12
 80016d4:	6033      	str	r3, [r6, #0]
 80016d6:	2000      	movs	r0, #0
 80016d8:	bd70      	pop	{r4, r5, r6, pc}
 80016da:	f000 fbb9 	bl	8001e50 <__malloc_lock>
 80016de:	4a21      	ldr	r2, [pc, #132]	; (8001764 <_malloc_r+0xac>)
 80016e0:	6814      	ldr	r4, [r2, #0]
 80016e2:	4621      	mov	r1, r4
 80016e4:	b991      	cbnz	r1, 800170c <_malloc_r+0x54>
 80016e6:	4c20      	ldr	r4, [pc, #128]	; (8001768 <_malloc_r+0xb0>)
 80016e8:	6823      	ldr	r3, [r4, #0]
 80016ea:	b91b      	cbnz	r3, 80016f4 <_malloc_r+0x3c>
 80016ec:	4630      	mov	r0, r6
 80016ee:	f000 fb05 	bl	8001cfc <_sbrk_r>
 80016f2:	6020      	str	r0, [r4, #0]
 80016f4:	4629      	mov	r1, r5
 80016f6:	4630      	mov	r0, r6
 80016f8:	f000 fb00 	bl	8001cfc <_sbrk_r>
 80016fc:	1c43      	adds	r3, r0, #1
 80016fe:	d124      	bne.n	800174a <_malloc_r+0x92>
 8001700:	230c      	movs	r3, #12
 8001702:	6033      	str	r3, [r6, #0]
 8001704:	4630      	mov	r0, r6
 8001706:	f000 fba4 	bl	8001e52 <__malloc_unlock>
 800170a:	e7e4      	b.n	80016d6 <_malloc_r+0x1e>
 800170c:	680b      	ldr	r3, [r1, #0]
 800170e:	1b5b      	subs	r3, r3, r5
 8001710:	d418      	bmi.n	8001744 <_malloc_r+0x8c>
 8001712:	2b0b      	cmp	r3, #11
 8001714:	d90f      	bls.n	8001736 <_malloc_r+0x7e>
 8001716:	600b      	str	r3, [r1, #0]
 8001718:	50cd      	str	r5, [r1, r3]
 800171a:	18cc      	adds	r4, r1, r3
 800171c:	4630      	mov	r0, r6
 800171e:	f000 fb98 	bl	8001e52 <__malloc_unlock>
 8001722:	f104 000b 	add.w	r0, r4, #11
 8001726:	1d23      	adds	r3, r4, #4
 8001728:	f020 0007 	bic.w	r0, r0, #7
 800172c:	1ac3      	subs	r3, r0, r3
 800172e:	d0d3      	beq.n	80016d8 <_malloc_r+0x20>
 8001730:	425a      	negs	r2, r3
 8001732:	50e2      	str	r2, [r4, r3]
 8001734:	e7d0      	b.n	80016d8 <_malloc_r+0x20>
 8001736:	428c      	cmp	r4, r1
 8001738:	684b      	ldr	r3, [r1, #4]
 800173a:	bf16      	itet	ne
 800173c:	6063      	strne	r3, [r4, #4]
 800173e:	6013      	streq	r3, [r2, #0]
 8001740:	460c      	movne	r4, r1
 8001742:	e7eb      	b.n	800171c <_malloc_r+0x64>
 8001744:	460c      	mov	r4, r1
 8001746:	6849      	ldr	r1, [r1, #4]
 8001748:	e7cc      	b.n	80016e4 <_malloc_r+0x2c>
 800174a:	1cc4      	adds	r4, r0, #3
 800174c:	f024 0403 	bic.w	r4, r4, #3
 8001750:	42a0      	cmp	r0, r4
 8001752:	d005      	beq.n	8001760 <_malloc_r+0xa8>
 8001754:	1a21      	subs	r1, r4, r0
 8001756:	4630      	mov	r0, r6
 8001758:	f000 fad0 	bl	8001cfc <_sbrk_r>
 800175c:	3001      	adds	r0, #1
 800175e:	d0cf      	beq.n	8001700 <_malloc_r+0x48>
 8001760:	6025      	str	r5, [r4, #0]
 8001762:	e7db      	b.n	800171c <_malloc_r+0x64>
 8001764:	200000a0 	.word	0x200000a0
 8001768:	200000a4 	.word	0x200000a4

0800176c <__sfputc_r>:
 800176c:	6893      	ldr	r3, [r2, #8]
 800176e:	3b01      	subs	r3, #1
 8001770:	2b00      	cmp	r3, #0
 8001772:	b410      	push	{r4}
 8001774:	6093      	str	r3, [r2, #8]
 8001776:	da08      	bge.n	800178a <__sfputc_r+0x1e>
 8001778:	6994      	ldr	r4, [r2, #24]
 800177a:	42a3      	cmp	r3, r4
 800177c:	db01      	blt.n	8001782 <__sfputc_r+0x16>
 800177e:	290a      	cmp	r1, #10
 8001780:	d103      	bne.n	800178a <__sfputc_r+0x1e>
 8001782:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001786:	f7ff bcab 	b.w	80010e0 <__swbuf_r>
 800178a:	6813      	ldr	r3, [r2, #0]
 800178c:	1c58      	adds	r0, r3, #1
 800178e:	6010      	str	r0, [r2, #0]
 8001790:	7019      	strb	r1, [r3, #0]
 8001792:	4608      	mov	r0, r1
 8001794:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001798:	4770      	bx	lr

0800179a <__sfputs_r>:
 800179a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800179c:	4606      	mov	r6, r0
 800179e:	460f      	mov	r7, r1
 80017a0:	4614      	mov	r4, r2
 80017a2:	18d5      	adds	r5, r2, r3
 80017a4:	42ac      	cmp	r4, r5
 80017a6:	d101      	bne.n	80017ac <__sfputs_r+0x12>
 80017a8:	2000      	movs	r0, #0
 80017aa:	e007      	b.n	80017bc <__sfputs_r+0x22>
 80017ac:	463a      	mov	r2, r7
 80017ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80017b2:	4630      	mov	r0, r6
 80017b4:	f7ff ffda 	bl	800176c <__sfputc_r>
 80017b8:	1c43      	adds	r3, r0, #1
 80017ba:	d1f3      	bne.n	80017a4 <__sfputs_r+0xa>
 80017bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080017c0 <_vfiprintf_r>:
 80017c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017c4:	460c      	mov	r4, r1
 80017c6:	b09d      	sub	sp, #116	; 0x74
 80017c8:	4617      	mov	r7, r2
 80017ca:	461d      	mov	r5, r3
 80017cc:	4606      	mov	r6, r0
 80017ce:	b118      	cbz	r0, 80017d8 <_vfiprintf_r+0x18>
 80017d0:	6983      	ldr	r3, [r0, #24]
 80017d2:	b90b      	cbnz	r3, 80017d8 <_vfiprintf_r+0x18>
 80017d4:	f7ff fe34 	bl	8001440 <__sinit>
 80017d8:	4b7c      	ldr	r3, [pc, #496]	; (80019cc <_vfiprintf_r+0x20c>)
 80017da:	429c      	cmp	r4, r3
 80017dc:	d158      	bne.n	8001890 <_vfiprintf_r+0xd0>
 80017de:	6874      	ldr	r4, [r6, #4]
 80017e0:	89a3      	ldrh	r3, [r4, #12]
 80017e2:	0718      	lsls	r0, r3, #28
 80017e4:	d55e      	bpl.n	80018a4 <_vfiprintf_r+0xe4>
 80017e6:	6923      	ldr	r3, [r4, #16]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d05b      	beq.n	80018a4 <_vfiprintf_r+0xe4>
 80017ec:	2300      	movs	r3, #0
 80017ee:	9309      	str	r3, [sp, #36]	; 0x24
 80017f0:	2320      	movs	r3, #32
 80017f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80017f6:	2330      	movs	r3, #48	; 0x30
 80017f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80017fc:	9503      	str	r5, [sp, #12]
 80017fe:	f04f 0b01 	mov.w	fp, #1
 8001802:	46b8      	mov	r8, r7
 8001804:	4645      	mov	r5, r8
 8001806:	f815 3b01 	ldrb.w	r3, [r5], #1
 800180a:	b10b      	cbz	r3, 8001810 <_vfiprintf_r+0x50>
 800180c:	2b25      	cmp	r3, #37	; 0x25
 800180e:	d154      	bne.n	80018ba <_vfiprintf_r+0xfa>
 8001810:	ebb8 0a07 	subs.w	sl, r8, r7
 8001814:	d00b      	beq.n	800182e <_vfiprintf_r+0x6e>
 8001816:	4653      	mov	r3, sl
 8001818:	463a      	mov	r2, r7
 800181a:	4621      	mov	r1, r4
 800181c:	4630      	mov	r0, r6
 800181e:	f7ff ffbc 	bl	800179a <__sfputs_r>
 8001822:	3001      	adds	r0, #1
 8001824:	f000 80c2 	beq.w	80019ac <_vfiprintf_r+0x1ec>
 8001828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800182a:	4453      	add	r3, sl
 800182c:	9309      	str	r3, [sp, #36]	; 0x24
 800182e:	f898 3000 	ldrb.w	r3, [r8]
 8001832:	2b00      	cmp	r3, #0
 8001834:	f000 80ba 	beq.w	80019ac <_vfiprintf_r+0x1ec>
 8001838:	2300      	movs	r3, #0
 800183a:	f04f 32ff 	mov.w	r2, #4294967295
 800183e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001842:	9304      	str	r3, [sp, #16]
 8001844:	9307      	str	r3, [sp, #28]
 8001846:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800184a:	931a      	str	r3, [sp, #104]	; 0x68
 800184c:	46a8      	mov	r8, r5
 800184e:	2205      	movs	r2, #5
 8001850:	f818 1b01 	ldrb.w	r1, [r8], #1
 8001854:	485e      	ldr	r0, [pc, #376]	; (80019d0 <_vfiprintf_r+0x210>)
 8001856:	f7fe fccb 	bl	80001f0 <memchr>
 800185a:	9b04      	ldr	r3, [sp, #16]
 800185c:	bb78      	cbnz	r0, 80018be <_vfiprintf_r+0xfe>
 800185e:	06d9      	lsls	r1, r3, #27
 8001860:	bf44      	itt	mi
 8001862:	2220      	movmi	r2, #32
 8001864:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001868:	071a      	lsls	r2, r3, #28
 800186a:	bf44      	itt	mi
 800186c:	222b      	movmi	r2, #43	; 0x2b
 800186e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001872:	782a      	ldrb	r2, [r5, #0]
 8001874:	2a2a      	cmp	r2, #42	; 0x2a
 8001876:	d02a      	beq.n	80018ce <_vfiprintf_r+0x10e>
 8001878:	9a07      	ldr	r2, [sp, #28]
 800187a:	46a8      	mov	r8, r5
 800187c:	2000      	movs	r0, #0
 800187e:	250a      	movs	r5, #10
 8001880:	4641      	mov	r1, r8
 8001882:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001886:	3b30      	subs	r3, #48	; 0x30
 8001888:	2b09      	cmp	r3, #9
 800188a:	d969      	bls.n	8001960 <_vfiprintf_r+0x1a0>
 800188c:	b360      	cbz	r0, 80018e8 <_vfiprintf_r+0x128>
 800188e:	e024      	b.n	80018da <_vfiprintf_r+0x11a>
 8001890:	4b50      	ldr	r3, [pc, #320]	; (80019d4 <_vfiprintf_r+0x214>)
 8001892:	429c      	cmp	r4, r3
 8001894:	d101      	bne.n	800189a <_vfiprintf_r+0xda>
 8001896:	68b4      	ldr	r4, [r6, #8]
 8001898:	e7a2      	b.n	80017e0 <_vfiprintf_r+0x20>
 800189a:	4b4f      	ldr	r3, [pc, #316]	; (80019d8 <_vfiprintf_r+0x218>)
 800189c:	429c      	cmp	r4, r3
 800189e:	bf08      	it	eq
 80018a0:	68f4      	ldreq	r4, [r6, #12]
 80018a2:	e79d      	b.n	80017e0 <_vfiprintf_r+0x20>
 80018a4:	4621      	mov	r1, r4
 80018a6:	4630      	mov	r0, r6
 80018a8:	f7ff fc6c 	bl	8001184 <__swsetup_r>
 80018ac:	2800      	cmp	r0, #0
 80018ae:	d09d      	beq.n	80017ec <_vfiprintf_r+0x2c>
 80018b0:	f04f 30ff 	mov.w	r0, #4294967295
 80018b4:	b01d      	add	sp, #116	; 0x74
 80018b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018ba:	46a8      	mov	r8, r5
 80018bc:	e7a2      	b.n	8001804 <_vfiprintf_r+0x44>
 80018be:	4a44      	ldr	r2, [pc, #272]	; (80019d0 <_vfiprintf_r+0x210>)
 80018c0:	1a80      	subs	r0, r0, r2
 80018c2:	fa0b f000 	lsl.w	r0, fp, r0
 80018c6:	4318      	orrs	r0, r3
 80018c8:	9004      	str	r0, [sp, #16]
 80018ca:	4645      	mov	r5, r8
 80018cc:	e7be      	b.n	800184c <_vfiprintf_r+0x8c>
 80018ce:	9a03      	ldr	r2, [sp, #12]
 80018d0:	1d11      	adds	r1, r2, #4
 80018d2:	6812      	ldr	r2, [r2, #0]
 80018d4:	9103      	str	r1, [sp, #12]
 80018d6:	2a00      	cmp	r2, #0
 80018d8:	db01      	blt.n	80018de <_vfiprintf_r+0x11e>
 80018da:	9207      	str	r2, [sp, #28]
 80018dc:	e004      	b.n	80018e8 <_vfiprintf_r+0x128>
 80018de:	4252      	negs	r2, r2
 80018e0:	f043 0302 	orr.w	r3, r3, #2
 80018e4:	9207      	str	r2, [sp, #28]
 80018e6:	9304      	str	r3, [sp, #16]
 80018e8:	f898 3000 	ldrb.w	r3, [r8]
 80018ec:	2b2e      	cmp	r3, #46	; 0x2e
 80018ee:	d10e      	bne.n	800190e <_vfiprintf_r+0x14e>
 80018f0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80018f4:	2b2a      	cmp	r3, #42	; 0x2a
 80018f6:	d138      	bne.n	800196a <_vfiprintf_r+0x1aa>
 80018f8:	9b03      	ldr	r3, [sp, #12]
 80018fa:	1d1a      	adds	r2, r3, #4
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	9203      	str	r2, [sp, #12]
 8001900:	2b00      	cmp	r3, #0
 8001902:	bfb8      	it	lt
 8001904:	f04f 33ff 	movlt.w	r3, #4294967295
 8001908:	f108 0802 	add.w	r8, r8, #2
 800190c:	9305      	str	r3, [sp, #20]
 800190e:	4d33      	ldr	r5, [pc, #204]	; (80019dc <_vfiprintf_r+0x21c>)
 8001910:	f898 1000 	ldrb.w	r1, [r8]
 8001914:	2203      	movs	r2, #3
 8001916:	4628      	mov	r0, r5
 8001918:	f7fe fc6a 	bl	80001f0 <memchr>
 800191c:	b140      	cbz	r0, 8001930 <_vfiprintf_r+0x170>
 800191e:	2340      	movs	r3, #64	; 0x40
 8001920:	1b40      	subs	r0, r0, r5
 8001922:	fa03 f000 	lsl.w	r0, r3, r0
 8001926:	9b04      	ldr	r3, [sp, #16]
 8001928:	4303      	orrs	r3, r0
 800192a:	f108 0801 	add.w	r8, r8, #1
 800192e:	9304      	str	r3, [sp, #16]
 8001930:	f898 1000 	ldrb.w	r1, [r8]
 8001934:	482a      	ldr	r0, [pc, #168]	; (80019e0 <_vfiprintf_r+0x220>)
 8001936:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800193a:	2206      	movs	r2, #6
 800193c:	f108 0701 	add.w	r7, r8, #1
 8001940:	f7fe fc56 	bl	80001f0 <memchr>
 8001944:	2800      	cmp	r0, #0
 8001946:	d037      	beq.n	80019b8 <_vfiprintf_r+0x1f8>
 8001948:	4b26      	ldr	r3, [pc, #152]	; (80019e4 <_vfiprintf_r+0x224>)
 800194a:	bb1b      	cbnz	r3, 8001994 <_vfiprintf_r+0x1d4>
 800194c:	9b03      	ldr	r3, [sp, #12]
 800194e:	3307      	adds	r3, #7
 8001950:	f023 0307 	bic.w	r3, r3, #7
 8001954:	3308      	adds	r3, #8
 8001956:	9303      	str	r3, [sp, #12]
 8001958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800195a:	444b      	add	r3, r9
 800195c:	9309      	str	r3, [sp, #36]	; 0x24
 800195e:	e750      	b.n	8001802 <_vfiprintf_r+0x42>
 8001960:	fb05 3202 	mla	r2, r5, r2, r3
 8001964:	2001      	movs	r0, #1
 8001966:	4688      	mov	r8, r1
 8001968:	e78a      	b.n	8001880 <_vfiprintf_r+0xc0>
 800196a:	2300      	movs	r3, #0
 800196c:	f108 0801 	add.w	r8, r8, #1
 8001970:	9305      	str	r3, [sp, #20]
 8001972:	4619      	mov	r1, r3
 8001974:	250a      	movs	r5, #10
 8001976:	4640      	mov	r0, r8
 8001978:	f810 2b01 	ldrb.w	r2, [r0], #1
 800197c:	3a30      	subs	r2, #48	; 0x30
 800197e:	2a09      	cmp	r2, #9
 8001980:	d903      	bls.n	800198a <_vfiprintf_r+0x1ca>
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0c3      	beq.n	800190e <_vfiprintf_r+0x14e>
 8001986:	9105      	str	r1, [sp, #20]
 8001988:	e7c1      	b.n	800190e <_vfiprintf_r+0x14e>
 800198a:	fb05 2101 	mla	r1, r5, r1, r2
 800198e:	2301      	movs	r3, #1
 8001990:	4680      	mov	r8, r0
 8001992:	e7f0      	b.n	8001976 <_vfiprintf_r+0x1b6>
 8001994:	ab03      	add	r3, sp, #12
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	4622      	mov	r2, r4
 800199a:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <_vfiprintf_r+0x228>)
 800199c:	a904      	add	r1, sp, #16
 800199e:	4630      	mov	r0, r6
 80019a0:	f3af 8000 	nop.w
 80019a4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80019a8:	4681      	mov	r9, r0
 80019aa:	d1d5      	bne.n	8001958 <_vfiprintf_r+0x198>
 80019ac:	89a3      	ldrh	r3, [r4, #12]
 80019ae:	065b      	lsls	r3, r3, #25
 80019b0:	f53f af7e 	bmi.w	80018b0 <_vfiprintf_r+0xf0>
 80019b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80019b6:	e77d      	b.n	80018b4 <_vfiprintf_r+0xf4>
 80019b8:	ab03      	add	r3, sp, #12
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	4622      	mov	r2, r4
 80019be:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <_vfiprintf_r+0x228>)
 80019c0:	a904      	add	r1, sp, #16
 80019c2:	4630      	mov	r0, r6
 80019c4:	f000 f888 	bl	8001ad8 <_printf_i>
 80019c8:	e7ec      	b.n	80019a4 <_vfiprintf_r+0x1e4>
 80019ca:	bf00      	nop
 80019cc:	08002428 	.word	0x08002428
 80019d0:	08002468 	.word	0x08002468
 80019d4:	08002448 	.word	0x08002448
 80019d8:	08002408 	.word	0x08002408
 80019dc:	0800246e 	.word	0x0800246e
 80019e0:	08002472 	.word	0x08002472
 80019e4:	00000000 	.word	0x00000000
 80019e8:	0800179b 	.word	0x0800179b

080019ec <_printf_common>:
 80019ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019f0:	4691      	mov	r9, r2
 80019f2:	461f      	mov	r7, r3
 80019f4:	688a      	ldr	r2, [r1, #8]
 80019f6:	690b      	ldr	r3, [r1, #16]
 80019f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80019fc:	4293      	cmp	r3, r2
 80019fe:	bfb8      	it	lt
 8001a00:	4613      	movlt	r3, r2
 8001a02:	f8c9 3000 	str.w	r3, [r9]
 8001a06:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001a0a:	4606      	mov	r6, r0
 8001a0c:	460c      	mov	r4, r1
 8001a0e:	b112      	cbz	r2, 8001a16 <_printf_common+0x2a>
 8001a10:	3301      	adds	r3, #1
 8001a12:	f8c9 3000 	str.w	r3, [r9]
 8001a16:	6823      	ldr	r3, [r4, #0]
 8001a18:	0699      	lsls	r1, r3, #26
 8001a1a:	bf42      	ittt	mi
 8001a1c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001a20:	3302      	addmi	r3, #2
 8001a22:	f8c9 3000 	strmi.w	r3, [r9]
 8001a26:	6825      	ldr	r5, [r4, #0]
 8001a28:	f015 0506 	ands.w	r5, r5, #6
 8001a2c:	d107      	bne.n	8001a3e <_printf_common+0x52>
 8001a2e:	f104 0a19 	add.w	sl, r4, #25
 8001a32:	68e3      	ldr	r3, [r4, #12]
 8001a34:	f8d9 2000 	ldr.w	r2, [r9]
 8001a38:	1a9b      	subs	r3, r3, r2
 8001a3a:	42ab      	cmp	r3, r5
 8001a3c:	dc28      	bgt.n	8001a90 <_printf_common+0xa4>
 8001a3e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001a42:	6822      	ldr	r2, [r4, #0]
 8001a44:	3300      	adds	r3, #0
 8001a46:	bf18      	it	ne
 8001a48:	2301      	movne	r3, #1
 8001a4a:	0692      	lsls	r2, r2, #26
 8001a4c:	d42d      	bmi.n	8001aaa <_printf_common+0xbe>
 8001a4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001a52:	4639      	mov	r1, r7
 8001a54:	4630      	mov	r0, r6
 8001a56:	47c0      	blx	r8
 8001a58:	3001      	adds	r0, #1
 8001a5a:	d020      	beq.n	8001a9e <_printf_common+0xb2>
 8001a5c:	6823      	ldr	r3, [r4, #0]
 8001a5e:	68e5      	ldr	r5, [r4, #12]
 8001a60:	f8d9 2000 	ldr.w	r2, [r9]
 8001a64:	f003 0306 	and.w	r3, r3, #6
 8001a68:	2b04      	cmp	r3, #4
 8001a6a:	bf08      	it	eq
 8001a6c:	1aad      	subeq	r5, r5, r2
 8001a6e:	68a3      	ldr	r3, [r4, #8]
 8001a70:	6922      	ldr	r2, [r4, #16]
 8001a72:	bf0c      	ite	eq
 8001a74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001a78:	2500      	movne	r5, #0
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	bfc4      	itt	gt
 8001a7e:	1a9b      	subgt	r3, r3, r2
 8001a80:	18ed      	addgt	r5, r5, r3
 8001a82:	f04f 0900 	mov.w	r9, #0
 8001a86:	341a      	adds	r4, #26
 8001a88:	454d      	cmp	r5, r9
 8001a8a:	d11a      	bne.n	8001ac2 <_printf_common+0xd6>
 8001a8c:	2000      	movs	r0, #0
 8001a8e:	e008      	b.n	8001aa2 <_printf_common+0xb6>
 8001a90:	2301      	movs	r3, #1
 8001a92:	4652      	mov	r2, sl
 8001a94:	4639      	mov	r1, r7
 8001a96:	4630      	mov	r0, r6
 8001a98:	47c0      	blx	r8
 8001a9a:	3001      	adds	r0, #1
 8001a9c:	d103      	bne.n	8001aa6 <_printf_common+0xba>
 8001a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001aa6:	3501      	adds	r5, #1
 8001aa8:	e7c3      	b.n	8001a32 <_printf_common+0x46>
 8001aaa:	18e1      	adds	r1, r4, r3
 8001aac:	1c5a      	adds	r2, r3, #1
 8001aae:	2030      	movs	r0, #48	; 0x30
 8001ab0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001ab4:	4422      	add	r2, r4
 8001ab6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001aba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001abe:	3302      	adds	r3, #2
 8001ac0:	e7c5      	b.n	8001a4e <_printf_common+0x62>
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	4622      	mov	r2, r4
 8001ac6:	4639      	mov	r1, r7
 8001ac8:	4630      	mov	r0, r6
 8001aca:	47c0      	blx	r8
 8001acc:	3001      	adds	r0, #1
 8001ace:	d0e6      	beq.n	8001a9e <_printf_common+0xb2>
 8001ad0:	f109 0901 	add.w	r9, r9, #1
 8001ad4:	e7d8      	b.n	8001a88 <_printf_common+0x9c>
	...

08001ad8 <_printf_i>:
 8001ad8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001adc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001ae0:	460c      	mov	r4, r1
 8001ae2:	7e09      	ldrb	r1, [r1, #24]
 8001ae4:	b085      	sub	sp, #20
 8001ae6:	296e      	cmp	r1, #110	; 0x6e
 8001ae8:	4617      	mov	r7, r2
 8001aea:	4606      	mov	r6, r0
 8001aec:	4698      	mov	r8, r3
 8001aee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001af0:	f000 80b3 	beq.w	8001c5a <_printf_i+0x182>
 8001af4:	d822      	bhi.n	8001b3c <_printf_i+0x64>
 8001af6:	2963      	cmp	r1, #99	; 0x63
 8001af8:	d036      	beq.n	8001b68 <_printf_i+0x90>
 8001afa:	d80a      	bhi.n	8001b12 <_printf_i+0x3a>
 8001afc:	2900      	cmp	r1, #0
 8001afe:	f000 80b9 	beq.w	8001c74 <_printf_i+0x19c>
 8001b02:	2958      	cmp	r1, #88	; 0x58
 8001b04:	f000 8083 	beq.w	8001c0e <_printf_i+0x136>
 8001b08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001b0c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001b10:	e032      	b.n	8001b78 <_printf_i+0xa0>
 8001b12:	2964      	cmp	r1, #100	; 0x64
 8001b14:	d001      	beq.n	8001b1a <_printf_i+0x42>
 8001b16:	2969      	cmp	r1, #105	; 0x69
 8001b18:	d1f6      	bne.n	8001b08 <_printf_i+0x30>
 8001b1a:	6820      	ldr	r0, [r4, #0]
 8001b1c:	6813      	ldr	r3, [r2, #0]
 8001b1e:	0605      	lsls	r5, r0, #24
 8001b20:	f103 0104 	add.w	r1, r3, #4
 8001b24:	d52a      	bpl.n	8001b7c <_printf_i+0xa4>
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6011      	str	r1, [r2, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	da03      	bge.n	8001b36 <_printf_i+0x5e>
 8001b2e:	222d      	movs	r2, #45	; 0x2d
 8001b30:	425b      	negs	r3, r3
 8001b32:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001b36:	486f      	ldr	r0, [pc, #444]	; (8001cf4 <_printf_i+0x21c>)
 8001b38:	220a      	movs	r2, #10
 8001b3a:	e039      	b.n	8001bb0 <_printf_i+0xd8>
 8001b3c:	2973      	cmp	r1, #115	; 0x73
 8001b3e:	f000 809d 	beq.w	8001c7c <_printf_i+0x1a4>
 8001b42:	d808      	bhi.n	8001b56 <_printf_i+0x7e>
 8001b44:	296f      	cmp	r1, #111	; 0x6f
 8001b46:	d020      	beq.n	8001b8a <_printf_i+0xb2>
 8001b48:	2970      	cmp	r1, #112	; 0x70
 8001b4a:	d1dd      	bne.n	8001b08 <_printf_i+0x30>
 8001b4c:	6823      	ldr	r3, [r4, #0]
 8001b4e:	f043 0320 	orr.w	r3, r3, #32
 8001b52:	6023      	str	r3, [r4, #0]
 8001b54:	e003      	b.n	8001b5e <_printf_i+0x86>
 8001b56:	2975      	cmp	r1, #117	; 0x75
 8001b58:	d017      	beq.n	8001b8a <_printf_i+0xb2>
 8001b5a:	2978      	cmp	r1, #120	; 0x78
 8001b5c:	d1d4      	bne.n	8001b08 <_printf_i+0x30>
 8001b5e:	2378      	movs	r3, #120	; 0x78
 8001b60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001b64:	4864      	ldr	r0, [pc, #400]	; (8001cf8 <_printf_i+0x220>)
 8001b66:	e055      	b.n	8001c14 <_printf_i+0x13c>
 8001b68:	6813      	ldr	r3, [r2, #0]
 8001b6a:	1d19      	adds	r1, r3, #4
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6011      	str	r1, [r2, #0]
 8001b70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001b74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e08c      	b.n	8001c96 <_printf_i+0x1be>
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6011      	str	r1, [r2, #0]
 8001b80:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001b84:	bf18      	it	ne
 8001b86:	b21b      	sxthne	r3, r3
 8001b88:	e7cf      	b.n	8001b2a <_printf_i+0x52>
 8001b8a:	6813      	ldr	r3, [r2, #0]
 8001b8c:	6825      	ldr	r5, [r4, #0]
 8001b8e:	1d18      	adds	r0, r3, #4
 8001b90:	6010      	str	r0, [r2, #0]
 8001b92:	0628      	lsls	r0, r5, #24
 8001b94:	d501      	bpl.n	8001b9a <_printf_i+0xc2>
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	e002      	b.n	8001ba0 <_printf_i+0xc8>
 8001b9a:	0668      	lsls	r0, r5, #25
 8001b9c:	d5fb      	bpl.n	8001b96 <_printf_i+0xbe>
 8001b9e:	881b      	ldrh	r3, [r3, #0]
 8001ba0:	4854      	ldr	r0, [pc, #336]	; (8001cf4 <_printf_i+0x21c>)
 8001ba2:	296f      	cmp	r1, #111	; 0x6f
 8001ba4:	bf14      	ite	ne
 8001ba6:	220a      	movne	r2, #10
 8001ba8:	2208      	moveq	r2, #8
 8001baa:	2100      	movs	r1, #0
 8001bac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001bb0:	6865      	ldr	r5, [r4, #4]
 8001bb2:	60a5      	str	r5, [r4, #8]
 8001bb4:	2d00      	cmp	r5, #0
 8001bb6:	f2c0 8095 	blt.w	8001ce4 <_printf_i+0x20c>
 8001bba:	6821      	ldr	r1, [r4, #0]
 8001bbc:	f021 0104 	bic.w	r1, r1, #4
 8001bc0:	6021      	str	r1, [r4, #0]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d13d      	bne.n	8001c42 <_printf_i+0x16a>
 8001bc6:	2d00      	cmp	r5, #0
 8001bc8:	f040 808e 	bne.w	8001ce8 <_printf_i+0x210>
 8001bcc:	4665      	mov	r5, ip
 8001bce:	2a08      	cmp	r2, #8
 8001bd0:	d10b      	bne.n	8001bea <_printf_i+0x112>
 8001bd2:	6823      	ldr	r3, [r4, #0]
 8001bd4:	07db      	lsls	r3, r3, #31
 8001bd6:	d508      	bpl.n	8001bea <_printf_i+0x112>
 8001bd8:	6923      	ldr	r3, [r4, #16]
 8001bda:	6862      	ldr	r2, [r4, #4]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	bfde      	ittt	le
 8001be0:	2330      	movle	r3, #48	; 0x30
 8001be2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001be6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001bea:	ebac 0305 	sub.w	r3, ip, r5
 8001bee:	6123      	str	r3, [r4, #16]
 8001bf0:	f8cd 8000 	str.w	r8, [sp]
 8001bf4:	463b      	mov	r3, r7
 8001bf6:	aa03      	add	r2, sp, #12
 8001bf8:	4621      	mov	r1, r4
 8001bfa:	4630      	mov	r0, r6
 8001bfc:	f7ff fef6 	bl	80019ec <_printf_common>
 8001c00:	3001      	adds	r0, #1
 8001c02:	d14d      	bne.n	8001ca0 <_printf_i+0x1c8>
 8001c04:	f04f 30ff 	mov.w	r0, #4294967295
 8001c08:	b005      	add	sp, #20
 8001c0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c0e:	4839      	ldr	r0, [pc, #228]	; (8001cf4 <_printf_i+0x21c>)
 8001c10:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001c14:	6813      	ldr	r3, [r2, #0]
 8001c16:	6821      	ldr	r1, [r4, #0]
 8001c18:	1d1d      	adds	r5, r3, #4
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6015      	str	r5, [r2, #0]
 8001c1e:	060a      	lsls	r2, r1, #24
 8001c20:	d50b      	bpl.n	8001c3a <_printf_i+0x162>
 8001c22:	07ca      	lsls	r2, r1, #31
 8001c24:	bf44      	itt	mi
 8001c26:	f041 0120 	orrmi.w	r1, r1, #32
 8001c2a:	6021      	strmi	r1, [r4, #0]
 8001c2c:	b91b      	cbnz	r3, 8001c36 <_printf_i+0x15e>
 8001c2e:	6822      	ldr	r2, [r4, #0]
 8001c30:	f022 0220 	bic.w	r2, r2, #32
 8001c34:	6022      	str	r2, [r4, #0]
 8001c36:	2210      	movs	r2, #16
 8001c38:	e7b7      	b.n	8001baa <_printf_i+0xd2>
 8001c3a:	064d      	lsls	r5, r1, #25
 8001c3c:	bf48      	it	mi
 8001c3e:	b29b      	uxthmi	r3, r3
 8001c40:	e7ef      	b.n	8001c22 <_printf_i+0x14a>
 8001c42:	4665      	mov	r5, ip
 8001c44:	fbb3 f1f2 	udiv	r1, r3, r2
 8001c48:	fb02 3311 	mls	r3, r2, r1, r3
 8001c4c:	5cc3      	ldrb	r3, [r0, r3]
 8001c4e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001c52:	460b      	mov	r3, r1
 8001c54:	2900      	cmp	r1, #0
 8001c56:	d1f5      	bne.n	8001c44 <_printf_i+0x16c>
 8001c58:	e7b9      	b.n	8001bce <_printf_i+0xf6>
 8001c5a:	6813      	ldr	r3, [r2, #0]
 8001c5c:	6825      	ldr	r5, [r4, #0]
 8001c5e:	6961      	ldr	r1, [r4, #20]
 8001c60:	1d18      	adds	r0, r3, #4
 8001c62:	6010      	str	r0, [r2, #0]
 8001c64:	0628      	lsls	r0, r5, #24
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	d501      	bpl.n	8001c6e <_printf_i+0x196>
 8001c6a:	6019      	str	r1, [r3, #0]
 8001c6c:	e002      	b.n	8001c74 <_printf_i+0x19c>
 8001c6e:	066a      	lsls	r2, r5, #25
 8001c70:	d5fb      	bpl.n	8001c6a <_printf_i+0x192>
 8001c72:	8019      	strh	r1, [r3, #0]
 8001c74:	2300      	movs	r3, #0
 8001c76:	6123      	str	r3, [r4, #16]
 8001c78:	4665      	mov	r5, ip
 8001c7a:	e7b9      	b.n	8001bf0 <_printf_i+0x118>
 8001c7c:	6813      	ldr	r3, [r2, #0]
 8001c7e:	1d19      	adds	r1, r3, #4
 8001c80:	6011      	str	r1, [r2, #0]
 8001c82:	681d      	ldr	r5, [r3, #0]
 8001c84:	6862      	ldr	r2, [r4, #4]
 8001c86:	2100      	movs	r1, #0
 8001c88:	4628      	mov	r0, r5
 8001c8a:	f7fe fab1 	bl	80001f0 <memchr>
 8001c8e:	b108      	cbz	r0, 8001c94 <_printf_i+0x1bc>
 8001c90:	1b40      	subs	r0, r0, r5
 8001c92:	6060      	str	r0, [r4, #4]
 8001c94:	6863      	ldr	r3, [r4, #4]
 8001c96:	6123      	str	r3, [r4, #16]
 8001c98:	2300      	movs	r3, #0
 8001c9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001c9e:	e7a7      	b.n	8001bf0 <_printf_i+0x118>
 8001ca0:	6923      	ldr	r3, [r4, #16]
 8001ca2:	462a      	mov	r2, r5
 8001ca4:	4639      	mov	r1, r7
 8001ca6:	4630      	mov	r0, r6
 8001ca8:	47c0      	blx	r8
 8001caa:	3001      	adds	r0, #1
 8001cac:	d0aa      	beq.n	8001c04 <_printf_i+0x12c>
 8001cae:	6823      	ldr	r3, [r4, #0]
 8001cb0:	079b      	lsls	r3, r3, #30
 8001cb2:	d413      	bmi.n	8001cdc <_printf_i+0x204>
 8001cb4:	68e0      	ldr	r0, [r4, #12]
 8001cb6:	9b03      	ldr	r3, [sp, #12]
 8001cb8:	4298      	cmp	r0, r3
 8001cba:	bfb8      	it	lt
 8001cbc:	4618      	movlt	r0, r3
 8001cbe:	e7a3      	b.n	8001c08 <_printf_i+0x130>
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	464a      	mov	r2, r9
 8001cc4:	4639      	mov	r1, r7
 8001cc6:	4630      	mov	r0, r6
 8001cc8:	47c0      	blx	r8
 8001cca:	3001      	adds	r0, #1
 8001ccc:	d09a      	beq.n	8001c04 <_printf_i+0x12c>
 8001cce:	3501      	adds	r5, #1
 8001cd0:	68e3      	ldr	r3, [r4, #12]
 8001cd2:	9a03      	ldr	r2, [sp, #12]
 8001cd4:	1a9b      	subs	r3, r3, r2
 8001cd6:	42ab      	cmp	r3, r5
 8001cd8:	dcf2      	bgt.n	8001cc0 <_printf_i+0x1e8>
 8001cda:	e7eb      	b.n	8001cb4 <_printf_i+0x1dc>
 8001cdc:	2500      	movs	r5, #0
 8001cde:	f104 0919 	add.w	r9, r4, #25
 8001ce2:	e7f5      	b.n	8001cd0 <_printf_i+0x1f8>
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1ac      	bne.n	8001c42 <_printf_i+0x16a>
 8001ce8:	7803      	ldrb	r3, [r0, #0]
 8001cea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001cee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001cf2:	e76c      	b.n	8001bce <_printf_i+0xf6>
 8001cf4:	08002479 	.word	0x08002479
 8001cf8:	0800248a 	.word	0x0800248a

08001cfc <_sbrk_r>:
 8001cfc:	b538      	push	{r3, r4, r5, lr}
 8001cfe:	4c06      	ldr	r4, [pc, #24]	; (8001d18 <_sbrk_r+0x1c>)
 8001d00:	2300      	movs	r3, #0
 8001d02:	4605      	mov	r5, r0
 8001d04:	4608      	mov	r0, r1
 8001d06:	6023      	str	r3, [r4, #0]
 8001d08:	f7fe fb9e 	bl	8000448 <_sbrk>
 8001d0c:	1c43      	adds	r3, r0, #1
 8001d0e:	d102      	bne.n	8001d16 <_sbrk_r+0x1a>
 8001d10:	6823      	ldr	r3, [r4, #0]
 8001d12:	b103      	cbz	r3, 8001d16 <_sbrk_r+0x1a>
 8001d14:	602b      	str	r3, [r5, #0]
 8001d16:	bd38      	pop	{r3, r4, r5, pc}
 8001d18:	2000019c 	.word	0x2000019c

08001d1c <__sread>:
 8001d1c:	b510      	push	{r4, lr}
 8001d1e:	460c      	mov	r4, r1
 8001d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d24:	f000 f896 	bl	8001e54 <_read_r>
 8001d28:	2800      	cmp	r0, #0
 8001d2a:	bfab      	itete	ge
 8001d2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001d2e:	89a3      	ldrhlt	r3, [r4, #12]
 8001d30:	181b      	addge	r3, r3, r0
 8001d32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001d36:	bfac      	ite	ge
 8001d38:	6563      	strge	r3, [r4, #84]	; 0x54
 8001d3a:	81a3      	strhlt	r3, [r4, #12]
 8001d3c:	bd10      	pop	{r4, pc}

08001d3e <__swrite>:
 8001d3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d42:	461f      	mov	r7, r3
 8001d44:	898b      	ldrh	r3, [r1, #12]
 8001d46:	05db      	lsls	r3, r3, #23
 8001d48:	4605      	mov	r5, r0
 8001d4a:	460c      	mov	r4, r1
 8001d4c:	4616      	mov	r6, r2
 8001d4e:	d505      	bpl.n	8001d5c <__swrite+0x1e>
 8001d50:	2302      	movs	r3, #2
 8001d52:	2200      	movs	r2, #0
 8001d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d58:	f000 f868 	bl	8001e2c <_lseek_r>
 8001d5c:	89a3      	ldrh	r3, [r4, #12]
 8001d5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001d62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d66:	81a3      	strh	r3, [r4, #12]
 8001d68:	4632      	mov	r2, r6
 8001d6a:	463b      	mov	r3, r7
 8001d6c:	4628      	mov	r0, r5
 8001d6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001d72:	f000 b817 	b.w	8001da4 <_write_r>

08001d76 <__sseek>:
 8001d76:	b510      	push	{r4, lr}
 8001d78:	460c      	mov	r4, r1
 8001d7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d7e:	f000 f855 	bl	8001e2c <_lseek_r>
 8001d82:	1c43      	adds	r3, r0, #1
 8001d84:	89a3      	ldrh	r3, [r4, #12]
 8001d86:	bf15      	itete	ne
 8001d88:	6560      	strne	r0, [r4, #84]	; 0x54
 8001d8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001d8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001d92:	81a3      	strheq	r3, [r4, #12]
 8001d94:	bf18      	it	ne
 8001d96:	81a3      	strhne	r3, [r4, #12]
 8001d98:	bd10      	pop	{r4, pc}

08001d9a <__sclose>:
 8001d9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d9e:	f000 b813 	b.w	8001dc8 <_close_r>
	...

08001da4 <_write_r>:
 8001da4:	b538      	push	{r3, r4, r5, lr}
 8001da6:	4c07      	ldr	r4, [pc, #28]	; (8001dc4 <_write_r+0x20>)
 8001da8:	4605      	mov	r5, r0
 8001daa:	4608      	mov	r0, r1
 8001dac:	4611      	mov	r1, r2
 8001dae:	2200      	movs	r2, #0
 8001db0:	6022      	str	r2, [r4, #0]
 8001db2:	461a      	mov	r2, r3
 8001db4:	f000 f911 	bl	8001fda <_write>
 8001db8:	1c43      	adds	r3, r0, #1
 8001dba:	d102      	bne.n	8001dc2 <_write_r+0x1e>
 8001dbc:	6823      	ldr	r3, [r4, #0]
 8001dbe:	b103      	cbz	r3, 8001dc2 <_write_r+0x1e>
 8001dc0:	602b      	str	r3, [r5, #0]
 8001dc2:	bd38      	pop	{r3, r4, r5, pc}
 8001dc4:	2000019c 	.word	0x2000019c

08001dc8 <_close_r>:
 8001dc8:	b538      	push	{r3, r4, r5, lr}
 8001dca:	4c06      	ldr	r4, [pc, #24]	; (8001de4 <_close_r+0x1c>)
 8001dcc:	2300      	movs	r3, #0
 8001dce:	4605      	mov	r5, r0
 8001dd0:	4608      	mov	r0, r1
 8001dd2:	6023      	str	r3, [r4, #0]
 8001dd4:	f000 f930 	bl	8002038 <_close>
 8001dd8:	1c43      	adds	r3, r0, #1
 8001dda:	d102      	bne.n	8001de2 <_close_r+0x1a>
 8001ddc:	6823      	ldr	r3, [r4, #0]
 8001dde:	b103      	cbz	r3, 8001de2 <_close_r+0x1a>
 8001de0:	602b      	str	r3, [r5, #0]
 8001de2:	bd38      	pop	{r3, r4, r5, pc}
 8001de4:	2000019c 	.word	0x2000019c

08001de8 <_fstat_r>:
 8001de8:	b538      	push	{r3, r4, r5, lr}
 8001dea:	4c07      	ldr	r4, [pc, #28]	; (8001e08 <_fstat_r+0x20>)
 8001dec:	2300      	movs	r3, #0
 8001dee:	4605      	mov	r5, r0
 8001df0:	4608      	mov	r0, r1
 8001df2:	4611      	mov	r1, r2
 8001df4:	6023      	str	r3, [r4, #0]
 8001df6:	f000 f966 	bl	80020c6 <_fstat>
 8001dfa:	1c43      	adds	r3, r0, #1
 8001dfc:	d102      	bne.n	8001e04 <_fstat_r+0x1c>
 8001dfe:	6823      	ldr	r3, [r4, #0]
 8001e00:	b103      	cbz	r3, 8001e04 <_fstat_r+0x1c>
 8001e02:	602b      	str	r3, [r5, #0]
 8001e04:	bd38      	pop	{r3, r4, r5, pc}
 8001e06:	bf00      	nop
 8001e08:	2000019c 	.word	0x2000019c

08001e0c <_isatty_r>:
 8001e0c:	b538      	push	{r3, r4, r5, lr}
 8001e0e:	4c06      	ldr	r4, [pc, #24]	; (8001e28 <_isatty_r+0x1c>)
 8001e10:	2300      	movs	r3, #0
 8001e12:	4605      	mov	r5, r0
 8001e14:	4608      	mov	r0, r1
 8001e16:	6023      	str	r3, [r4, #0]
 8001e18:	f000 faba 	bl	8002390 <_isatty>
 8001e1c:	1c43      	adds	r3, r0, #1
 8001e1e:	d102      	bne.n	8001e26 <_isatty_r+0x1a>
 8001e20:	6823      	ldr	r3, [r4, #0]
 8001e22:	b103      	cbz	r3, 8001e26 <_isatty_r+0x1a>
 8001e24:	602b      	str	r3, [r5, #0]
 8001e26:	bd38      	pop	{r3, r4, r5, pc}
 8001e28:	2000019c 	.word	0x2000019c

08001e2c <_lseek_r>:
 8001e2c:	b538      	push	{r3, r4, r5, lr}
 8001e2e:	4c07      	ldr	r4, [pc, #28]	; (8001e4c <_lseek_r+0x20>)
 8001e30:	4605      	mov	r5, r0
 8001e32:	4608      	mov	r0, r1
 8001e34:	4611      	mov	r1, r2
 8001e36:	2200      	movs	r2, #0
 8001e38:	6022      	str	r2, [r4, #0]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	f000 f8bb 	bl	8001fb6 <_lseek>
 8001e40:	1c43      	adds	r3, r0, #1
 8001e42:	d102      	bne.n	8001e4a <_lseek_r+0x1e>
 8001e44:	6823      	ldr	r3, [r4, #0]
 8001e46:	b103      	cbz	r3, 8001e4a <_lseek_r+0x1e>
 8001e48:	602b      	str	r3, [r5, #0]
 8001e4a:	bd38      	pop	{r3, r4, r5, pc}
 8001e4c:	2000019c 	.word	0x2000019c

08001e50 <__malloc_lock>:
 8001e50:	4770      	bx	lr

08001e52 <__malloc_unlock>:
 8001e52:	4770      	bx	lr

08001e54 <_read_r>:
 8001e54:	b538      	push	{r3, r4, r5, lr}
 8001e56:	4c07      	ldr	r4, [pc, #28]	; (8001e74 <_read_r+0x20>)
 8001e58:	4605      	mov	r5, r0
 8001e5a:	4608      	mov	r0, r1
 8001e5c:	4611      	mov	r1, r2
 8001e5e:	2200      	movs	r2, #0
 8001e60:	6022      	str	r2, [r4, #0]
 8001e62:	461a      	mov	r2, r3
 8001e64:	f000 f850 	bl	8001f08 <_read>
 8001e68:	1c43      	adds	r3, r0, #1
 8001e6a:	d102      	bne.n	8001e72 <_read_r+0x1e>
 8001e6c:	6823      	ldr	r3, [r4, #0]
 8001e6e:	b103      	cbz	r3, 8001e72 <_read_r+0x1e>
 8001e70:	602b      	str	r3, [r5, #0]
 8001e72:	bd38      	pop	{r3, r4, r5, pc}
 8001e74:	2000019c 	.word	0x2000019c

08001e78 <findslot>:
 8001e78:	4b0a      	ldr	r3, [pc, #40]	; (8001ea4 <findslot+0x2c>)
 8001e7a:	b510      	push	{r4, lr}
 8001e7c:	4604      	mov	r4, r0
 8001e7e:	6818      	ldr	r0, [r3, #0]
 8001e80:	b118      	cbz	r0, 8001e8a <findslot+0x12>
 8001e82:	6983      	ldr	r3, [r0, #24]
 8001e84:	b90b      	cbnz	r3, 8001e8a <findslot+0x12>
 8001e86:	f7ff fadb 	bl	8001440 <__sinit>
 8001e8a:	2c13      	cmp	r4, #19
 8001e8c:	d807      	bhi.n	8001e9e <findslot+0x26>
 8001e8e:	4806      	ldr	r0, [pc, #24]	; (8001ea8 <findslot+0x30>)
 8001e90:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 8001e94:	3301      	adds	r3, #1
 8001e96:	d002      	beq.n	8001e9e <findslot+0x26>
 8001e98:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001e9c:	bd10      	pop	{r4, pc}
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	e7fc      	b.n	8001e9c <findslot+0x24>
 8001ea2:	bf00      	nop
 8001ea4:	20000014 	.word	0x20000014
 8001ea8:	200000b4 	.word	0x200000b4

08001eac <checkerror>:
 8001eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eae:	1c43      	adds	r3, r0, #1
 8001eb0:	4605      	mov	r5, r0
 8001eb2:	d109      	bne.n	8001ec8 <checkerror+0x1c>
 8001eb4:	f7ff f866 	bl	8000f84 <__errno>
 8001eb8:	2413      	movs	r4, #19
 8001eba:	4606      	mov	r6, r0
 8001ebc:	2700      	movs	r7, #0
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	4639      	mov	r1, r7
 8001ec2:	beab      	bkpt	0x00ab
 8001ec4:	4604      	mov	r4, r0
 8001ec6:	6034      	str	r4, [r6, #0]
 8001ec8:	4628      	mov	r0, r5
 8001eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001ecc <error>:
 8001ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ece:	4605      	mov	r5, r0
 8001ed0:	f7ff f858 	bl	8000f84 <__errno>
 8001ed4:	2413      	movs	r4, #19
 8001ed6:	4606      	mov	r6, r0
 8001ed8:	2700      	movs	r7, #0
 8001eda:	4620      	mov	r0, r4
 8001edc:	4639      	mov	r1, r7
 8001ede:	beab      	bkpt	0x00ab
 8001ee0:	4604      	mov	r4, r0
 8001ee2:	6034      	str	r4, [r6, #0]
 8001ee4:	4628      	mov	r0, r5
 8001ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001ee8 <_swiread>:
 8001ee8:	b530      	push	{r4, r5, lr}
 8001eea:	b085      	sub	sp, #20
 8001eec:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001ef0:	9203      	str	r2, [sp, #12]
 8001ef2:	2406      	movs	r4, #6
 8001ef4:	ad01      	add	r5, sp, #4
 8001ef6:	4620      	mov	r0, r4
 8001ef8:	4629      	mov	r1, r5
 8001efa:	beab      	bkpt	0x00ab
 8001efc:	4604      	mov	r4, r0
 8001efe:	4620      	mov	r0, r4
 8001f00:	f7ff ffd4 	bl	8001eac <checkerror>
 8001f04:	b005      	add	sp, #20
 8001f06:	bd30      	pop	{r4, r5, pc}

08001f08 <_read>:
 8001f08:	b570      	push	{r4, r5, r6, lr}
 8001f0a:	460e      	mov	r6, r1
 8001f0c:	4615      	mov	r5, r2
 8001f0e:	f7ff ffb3 	bl	8001e78 <findslot>
 8001f12:	4604      	mov	r4, r0
 8001f14:	b930      	cbnz	r0, 8001f24 <_read+0x1c>
 8001f16:	f7ff f835 	bl	8000f84 <__errno>
 8001f1a:	2309      	movs	r3, #9
 8001f1c:	6003      	str	r3, [r0, #0]
 8001f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8001f22:	bd70      	pop	{r4, r5, r6, pc}
 8001f24:	462a      	mov	r2, r5
 8001f26:	4631      	mov	r1, r6
 8001f28:	6800      	ldr	r0, [r0, #0]
 8001f2a:	f7ff ffdd 	bl	8001ee8 <_swiread>
 8001f2e:	1c43      	adds	r3, r0, #1
 8001f30:	bf1f      	itttt	ne
 8001f32:	6863      	ldrne	r3, [r4, #4]
 8001f34:	1a28      	subne	r0, r5, r0
 8001f36:	181b      	addne	r3, r3, r0
 8001f38:	6063      	strne	r3, [r4, #4]
 8001f3a:	e7f2      	b.n	8001f22 <_read+0x1a>

08001f3c <_swilseek>:
 8001f3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f3e:	460c      	mov	r4, r1
 8001f40:	4616      	mov	r6, r2
 8001f42:	f7ff ff99 	bl	8001e78 <findslot>
 8001f46:	4605      	mov	r5, r0
 8001f48:	b940      	cbnz	r0, 8001f5c <_swilseek+0x20>
 8001f4a:	f7ff f81b 	bl	8000f84 <__errno>
 8001f4e:	2309      	movs	r3, #9
 8001f50:	6003      	str	r3, [r0, #0]
 8001f52:	f04f 34ff 	mov.w	r4, #4294967295
 8001f56:	4620      	mov	r0, r4
 8001f58:	b003      	add	sp, #12
 8001f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f5c:	2e02      	cmp	r6, #2
 8001f5e:	d903      	bls.n	8001f68 <_swilseek+0x2c>
 8001f60:	f7ff f810 	bl	8000f84 <__errno>
 8001f64:	2316      	movs	r3, #22
 8001f66:	e7f3      	b.n	8001f50 <_swilseek+0x14>
 8001f68:	2e01      	cmp	r6, #1
 8001f6a:	d112      	bne.n	8001f92 <_swilseek+0x56>
 8001f6c:	6843      	ldr	r3, [r0, #4]
 8001f6e:	18e4      	adds	r4, r4, r3
 8001f70:	d4f6      	bmi.n	8001f60 <_swilseek+0x24>
 8001f72:	682b      	ldr	r3, [r5, #0]
 8001f74:	260a      	movs	r6, #10
 8001f76:	e9cd 3400 	strd	r3, r4, [sp]
 8001f7a:	466f      	mov	r7, sp
 8001f7c:	4630      	mov	r0, r6
 8001f7e:	4639      	mov	r1, r7
 8001f80:	beab      	bkpt	0x00ab
 8001f82:	4606      	mov	r6, r0
 8001f84:	4630      	mov	r0, r6
 8001f86:	f7ff ff91 	bl	8001eac <checkerror>
 8001f8a:	2800      	cmp	r0, #0
 8001f8c:	dbe1      	blt.n	8001f52 <_swilseek+0x16>
 8001f8e:	606c      	str	r4, [r5, #4]
 8001f90:	e7e1      	b.n	8001f56 <_swilseek+0x1a>
 8001f92:	2e02      	cmp	r6, #2
 8001f94:	d1ed      	bne.n	8001f72 <_swilseek+0x36>
 8001f96:	af02      	add	r7, sp, #8
 8001f98:	6803      	ldr	r3, [r0, #0]
 8001f9a:	f847 3d08 	str.w	r3, [r7, #-8]!
 8001f9e:	260c      	movs	r6, #12
 8001fa0:	4630      	mov	r0, r6
 8001fa2:	4639      	mov	r1, r7
 8001fa4:	beab      	bkpt	0x00ab
 8001fa6:	4606      	mov	r6, r0
 8001fa8:	4630      	mov	r0, r6
 8001faa:	f7ff ff7f 	bl	8001eac <checkerror>
 8001fae:	1c43      	adds	r3, r0, #1
 8001fb0:	d0cf      	beq.n	8001f52 <_swilseek+0x16>
 8001fb2:	4404      	add	r4, r0
 8001fb4:	e7dd      	b.n	8001f72 <_swilseek+0x36>

08001fb6 <_lseek>:
 8001fb6:	f7ff bfc1 	b.w	8001f3c <_swilseek>

08001fba <_swiwrite>:
 8001fba:	b530      	push	{r4, r5, lr}
 8001fbc:	b085      	sub	sp, #20
 8001fbe:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001fc2:	9203      	str	r2, [sp, #12]
 8001fc4:	2405      	movs	r4, #5
 8001fc6:	ad01      	add	r5, sp, #4
 8001fc8:	4620      	mov	r0, r4
 8001fca:	4629      	mov	r1, r5
 8001fcc:	beab      	bkpt	0x00ab
 8001fce:	4604      	mov	r4, r0
 8001fd0:	4620      	mov	r0, r4
 8001fd2:	f7ff ff6b 	bl	8001eac <checkerror>
 8001fd6:	b005      	add	sp, #20
 8001fd8:	bd30      	pop	{r4, r5, pc}

08001fda <_write>:
 8001fda:	b570      	push	{r4, r5, r6, lr}
 8001fdc:	460e      	mov	r6, r1
 8001fde:	4615      	mov	r5, r2
 8001fe0:	f7ff ff4a 	bl	8001e78 <findslot>
 8001fe4:	4604      	mov	r4, r0
 8001fe6:	b930      	cbnz	r0, 8001ff6 <_write+0x1c>
 8001fe8:	f7fe ffcc 	bl	8000f84 <__errno>
 8001fec:	2309      	movs	r3, #9
 8001fee:	6003      	str	r3, [r0, #0]
 8001ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff4:	bd70      	pop	{r4, r5, r6, pc}
 8001ff6:	462a      	mov	r2, r5
 8001ff8:	4631      	mov	r1, r6
 8001ffa:	6800      	ldr	r0, [r0, #0]
 8001ffc:	f7ff ffdd 	bl	8001fba <_swiwrite>
 8002000:	1e02      	subs	r2, r0, #0
 8002002:	dbf5      	blt.n	8001ff0 <_write+0x16>
 8002004:	6863      	ldr	r3, [r4, #4]
 8002006:	1aa8      	subs	r0, r5, r2
 8002008:	4403      	add	r3, r0
 800200a:	42aa      	cmp	r2, r5
 800200c:	6063      	str	r3, [r4, #4]
 800200e:	d1f1      	bne.n	8001ff4 <_write+0x1a>
 8002010:	2000      	movs	r0, #0
 8002012:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002016:	f7ff bf59 	b.w	8001ecc <error>

0800201a <_swiclose>:
 800201a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800201c:	ad02      	add	r5, sp, #8
 800201e:	2402      	movs	r4, #2
 8002020:	f845 0d04 	str.w	r0, [r5, #-4]!
 8002024:	4620      	mov	r0, r4
 8002026:	4629      	mov	r1, r5
 8002028:	beab      	bkpt	0x00ab
 800202a:	4604      	mov	r4, r0
 800202c:	4620      	mov	r0, r4
 800202e:	f7ff ff3d 	bl	8001eac <checkerror>
 8002032:	b003      	add	sp, #12
 8002034:	bd30      	pop	{r4, r5, pc}
	...

08002038 <_close>:
 8002038:	b538      	push	{r3, r4, r5, lr}
 800203a:	4605      	mov	r5, r0
 800203c:	f7ff ff1c 	bl	8001e78 <findslot>
 8002040:	4604      	mov	r4, r0
 8002042:	b930      	cbnz	r0, 8002052 <_close+0x1a>
 8002044:	f7fe ff9e 	bl	8000f84 <__errno>
 8002048:	2309      	movs	r3, #9
 800204a:	6003      	str	r3, [r0, #0]
 800204c:	f04f 30ff 	mov.w	r0, #4294967295
 8002050:	bd38      	pop	{r3, r4, r5, pc}
 8002052:	3d01      	subs	r5, #1
 8002054:	2d01      	cmp	r5, #1
 8002056:	d809      	bhi.n	800206c <_close+0x34>
 8002058:	4b09      	ldr	r3, [pc, #36]	; (8002080 <_close+0x48>)
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	429a      	cmp	r2, r3
 8002060:	d104      	bne.n	800206c <_close+0x34>
 8002062:	f04f 33ff 	mov.w	r3, #4294967295
 8002066:	6003      	str	r3, [r0, #0]
 8002068:	2000      	movs	r0, #0
 800206a:	e7f1      	b.n	8002050 <_close+0x18>
 800206c:	6820      	ldr	r0, [r4, #0]
 800206e:	f7ff ffd4 	bl	800201a <_swiclose>
 8002072:	2800      	cmp	r0, #0
 8002074:	d1ec      	bne.n	8002050 <_close+0x18>
 8002076:	f04f 33ff 	mov.w	r3, #4294967295
 800207a:	6023      	str	r3, [r4, #0]
 800207c:	e7e8      	b.n	8002050 <_close+0x18>
 800207e:	bf00      	nop
 8002080:	200000b4 	.word	0x200000b4

08002084 <_swistat>:
 8002084:	b570      	push	{r4, r5, r6, lr}
 8002086:	460c      	mov	r4, r1
 8002088:	f7ff fef6 	bl	8001e78 <findslot>
 800208c:	4606      	mov	r6, r0
 800208e:	b930      	cbnz	r0, 800209e <_swistat+0x1a>
 8002090:	f7fe ff78 	bl	8000f84 <__errno>
 8002094:	2309      	movs	r3, #9
 8002096:	6003      	str	r3, [r0, #0]
 8002098:	f04f 30ff 	mov.w	r0, #4294967295
 800209c:	bd70      	pop	{r4, r5, r6, pc}
 800209e:	6863      	ldr	r3, [r4, #4]
 80020a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020a4:	6063      	str	r3, [r4, #4]
 80020a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020aa:	6463      	str	r3, [r4, #68]	; 0x44
 80020ac:	250c      	movs	r5, #12
 80020ae:	4628      	mov	r0, r5
 80020b0:	4631      	mov	r1, r6
 80020b2:	beab      	bkpt	0x00ab
 80020b4:	4605      	mov	r5, r0
 80020b6:	4628      	mov	r0, r5
 80020b8:	f7ff fef8 	bl	8001eac <checkerror>
 80020bc:	1c43      	adds	r3, r0, #1
 80020be:	bf1c      	itt	ne
 80020c0:	6120      	strne	r0, [r4, #16]
 80020c2:	2000      	movne	r0, #0
 80020c4:	e7ea      	b.n	800209c <_swistat+0x18>

080020c6 <_fstat>:
 80020c6:	460b      	mov	r3, r1
 80020c8:	b510      	push	{r4, lr}
 80020ca:	2100      	movs	r1, #0
 80020cc:	4604      	mov	r4, r0
 80020ce:	2258      	movs	r2, #88	; 0x58
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe ff81 	bl	8000fd8 <memset>
 80020d6:	4601      	mov	r1, r0
 80020d8:	4620      	mov	r0, r4
 80020da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020de:	f7ff bfd1 	b.w	8002084 <_swistat>

080020e2 <_stat>:
 80020e2:	b538      	push	{r3, r4, r5, lr}
 80020e4:	460d      	mov	r5, r1
 80020e6:	4604      	mov	r4, r0
 80020e8:	2258      	movs	r2, #88	; 0x58
 80020ea:	2100      	movs	r1, #0
 80020ec:	4628      	mov	r0, r5
 80020ee:	f7fe ff73 	bl	8000fd8 <memset>
 80020f2:	4620      	mov	r0, r4
 80020f4:	2100      	movs	r1, #0
 80020f6:	f000 f811 	bl	800211c <_swiopen>
 80020fa:	1c43      	adds	r3, r0, #1
 80020fc:	4604      	mov	r4, r0
 80020fe:	d00b      	beq.n	8002118 <_stat+0x36>
 8002100:	686b      	ldr	r3, [r5, #4]
 8002102:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002106:	606b      	str	r3, [r5, #4]
 8002108:	4629      	mov	r1, r5
 800210a:	f7ff ffbb 	bl	8002084 <_swistat>
 800210e:	4605      	mov	r5, r0
 8002110:	4620      	mov	r0, r4
 8002112:	f7ff ff91 	bl	8002038 <_close>
 8002116:	462c      	mov	r4, r5
 8002118:	4620      	mov	r0, r4
 800211a:	bd38      	pop	{r3, r4, r5, pc}

0800211c <_swiopen>:
 800211c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002120:	4b2b      	ldr	r3, [pc, #172]	; (80021d0 <_swiopen+0xb4>)
 8002122:	b096      	sub	sp, #88	; 0x58
 8002124:	4682      	mov	sl, r0
 8002126:	460e      	mov	r6, r1
 8002128:	2500      	movs	r5, #0
 800212a:	4698      	mov	r8, r3
 800212c:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 8002130:	1c61      	adds	r1, r4, #1
 8002132:	ea4f 07c5 	mov.w	r7, r5, lsl #3
 8002136:	d036      	beq.n	80021a6 <_swiopen+0x8a>
 8002138:	3501      	adds	r5, #1
 800213a:	2d14      	cmp	r5, #20
 800213c:	d1f6      	bne.n	800212c <_swiopen+0x10>
 800213e:	f7fe ff21 	bl	8000f84 <__errno>
 8002142:	2318      	movs	r3, #24
 8002144:	6003      	str	r3, [r0, #0]
 8002146:	f04f 34ff 	mov.w	r4, #4294967295
 800214a:	e03c      	b.n	80021c6 <_swiopen+0xaa>
 800214c:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8002150:	f240 6301 	movw	r3, #1537	; 0x601
 8002154:	07b2      	lsls	r2, r6, #30
 8002156:	bf48      	it	mi
 8002158:	f044 0402 	orrmi.w	r4, r4, #2
 800215c:	421e      	tst	r6, r3
 800215e:	bf18      	it	ne
 8002160:	f044 0404 	orrne.w	r4, r4, #4
 8002164:	0733      	lsls	r3, r6, #28
 8002166:	bf48      	it	mi
 8002168:	f024 0404 	bicmi.w	r4, r4, #4
 800216c:	4650      	mov	r0, sl
 800216e:	bf48      	it	mi
 8002170:	f044 0408 	orrmi.w	r4, r4, #8
 8002174:	f8cd a000 	str.w	sl, [sp]
 8002178:	f7fe f88a 	bl	8000290 <strlen>
 800217c:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8002180:	2401      	movs	r4, #1
 8002182:	4620      	mov	r0, r4
 8002184:	4649      	mov	r1, r9
 8002186:	beab      	bkpt	0x00ab
 8002188:	4604      	mov	r4, r0
 800218a:	2c00      	cmp	r4, #0
 800218c:	db06      	blt.n	800219c <_swiopen+0x80>
 800218e:	4447      	add	r7, r8
 8002190:	2300      	movs	r3, #0
 8002192:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8002196:	607b      	str	r3, [r7, #4]
 8002198:	462c      	mov	r4, r5
 800219a:	e014      	b.n	80021c6 <_swiopen+0xaa>
 800219c:	4620      	mov	r0, r4
 800219e:	f7ff fe95 	bl	8001ecc <error>
 80021a2:	4604      	mov	r4, r0
 80021a4:	e00f      	b.n	80021c6 <_swiopen+0xaa>
 80021a6:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 80021aa:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80021ae:	46e9      	mov	r9, sp
 80021b0:	d1cc      	bne.n	800214c <_swiopen+0x30>
 80021b2:	4649      	mov	r1, r9
 80021b4:	4650      	mov	r0, sl
 80021b6:	f7ff ff94 	bl	80020e2 <_stat>
 80021ba:	3001      	adds	r0, #1
 80021bc:	d0c6      	beq.n	800214c <_swiopen+0x30>
 80021be:	f7fe fee1 	bl	8000f84 <__errno>
 80021c2:	2311      	movs	r3, #17
 80021c4:	6003      	str	r3, [r0, #0]
 80021c6:	4620      	mov	r0, r4
 80021c8:	b016      	add	sp, #88	; 0x58
 80021ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021ce:	bf00      	nop
 80021d0:	200000b4 	.word	0x200000b4

080021d4 <_get_semihosting_exts>:
 80021d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80021d8:	4607      	mov	r7, r0
 80021da:	4688      	mov	r8, r1
 80021dc:	4829      	ldr	r0, [pc, #164]	; (8002284 <_get_semihosting_exts+0xb0>)
 80021de:	2100      	movs	r1, #0
 80021e0:	4615      	mov	r5, r2
 80021e2:	f7ff ff9b 	bl	800211c <_swiopen>
 80021e6:	462a      	mov	r2, r5
 80021e8:	4604      	mov	r4, r0
 80021ea:	2100      	movs	r1, #0
 80021ec:	4638      	mov	r0, r7
 80021ee:	f7fe fef3 	bl	8000fd8 <memset>
 80021f2:	1c63      	adds	r3, r4, #1
 80021f4:	d015      	beq.n	8002222 <_get_semihosting_exts+0x4e>
 80021f6:	4620      	mov	r0, r4
 80021f8:	f7ff fe3e 	bl	8001e78 <findslot>
 80021fc:	260c      	movs	r6, #12
 80021fe:	4681      	mov	r9, r0
 8002200:	4630      	mov	r0, r6
 8002202:	4649      	mov	r1, r9
 8002204:	beab      	bkpt	0x00ab
 8002206:	4606      	mov	r6, r0
 8002208:	4630      	mov	r0, r6
 800220a:	f7ff fe4f 	bl	8001eac <checkerror>
 800220e:	2803      	cmp	r0, #3
 8002210:	dd02      	ble.n	8002218 <_get_semihosting_exts+0x44>
 8002212:	3803      	subs	r0, #3
 8002214:	42a8      	cmp	r0, r5
 8002216:	dc08      	bgt.n	800222a <_get_semihosting_exts+0x56>
 8002218:	4620      	mov	r0, r4
 800221a:	f7ff ff0d 	bl	8002038 <_close>
 800221e:	f04f 34ff 	mov.w	r4, #4294967295
 8002222:	4620      	mov	r0, r4
 8002224:	b003      	add	sp, #12
 8002226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800222a:	2204      	movs	r2, #4
 800222c:	eb0d 0102 	add.w	r1, sp, r2
 8002230:	4620      	mov	r0, r4
 8002232:	f7ff fe69 	bl	8001f08 <_read>
 8002236:	2803      	cmp	r0, #3
 8002238:	ddee      	ble.n	8002218 <_get_semihosting_exts+0x44>
 800223a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800223e:	2b53      	cmp	r3, #83	; 0x53
 8002240:	d1ea      	bne.n	8002218 <_get_semihosting_exts+0x44>
 8002242:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002246:	2b48      	cmp	r3, #72	; 0x48
 8002248:	d1e6      	bne.n	8002218 <_get_semihosting_exts+0x44>
 800224a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800224e:	2b46      	cmp	r3, #70	; 0x46
 8002250:	d1e2      	bne.n	8002218 <_get_semihosting_exts+0x44>
 8002252:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002256:	2b42      	cmp	r3, #66	; 0x42
 8002258:	d1de      	bne.n	8002218 <_get_semihosting_exts+0x44>
 800225a:	2201      	movs	r2, #1
 800225c:	4641      	mov	r1, r8
 800225e:	4620      	mov	r0, r4
 8002260:	f7ff fe6c 	bl	8001f3c <_swilseek>
 8002264:	2800      	cmp	r0, #0
 8002266:	dbd7      	blt.n	8002218 <_get_semihosting_exts+0x44>
 8002268:	462a      	mov	r2, r5
 800226a:	4639      	mov	r1, r7
 800226c:	4620      	mov	r0, r4
 800226e:	f7ff fe4b 	bl	8001f08 <_read>
 8002272:	4605      	mov	r5, r0
 8002274:	4620      	mov	r0, r4
 8002276:	f7ff fedf 	bl	8002038 <_close>
 800227a:	4628      	mov	r0, r5
 800227c:	f7ff fe16 	bl	8001eac <checkerror>
 8002280:	4604      	mov	r4, r0
 8002282:	e7ce      	b.n	8002222 <_get_semihosting_exts+0x4e>
 8002284:	0800249b 	.word	0x0800249b

08002288 <initialise_semihosting_exts>:
 8002288:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800228a:	4d0a      	ldr	r5, [pc, #40]	; (80022b4 <initialise_semihosting_exts+0x2c>)
 800228c:	4c0a      	ldr	r4, [pc, #40]	; (80022b8 <initialise_semihosting_exts+0x30>)
 800228e:	2100      	movs	r1, #0
 8002290:	2201      	movs	r2, #1
 8002292:	a801      	add	r0, sp, #4
 8002294:	6029      	str	r1, [r5, #0]
 8002296:	6022      	str	r2, [r4, #0]
 8002298:	f7ff ff9c 	bl	80021d4 <_get_semihosting_exts>
 800229c:	2800      	cmp	r0, #0
 800229e:	dd07      	ble.n	80022b0 <initialise_semihosting_exts+0x28>
 80022a0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80022a4:	f003 0201 	and.w	r2, r3, #1
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	602a      	str	r2, [r5, #0]
 80022ae:	6023      	str	r3, [r4, #0]
 80022b0:	b003      	add	sp, #12
 80022b2:	bd30      	pop	{r4, r5, pc}
 80022b4:	20000078 	.word	0x20000078
 80022b8:	2000007c 	.word	0x2000007c

080022bc <_has_ext_stdout_stderr>:
 80022bc:	b510      	push	{r4, lr}
 80022be:	4c04      	ldr	r4, [pc, #16]	; (80022d0 <_has_ext_stdout_stderr+0x14>)
 80022c0:	6822      	ldr	r2, [r4, #0]
 80022c2:	2a00      	cmp	r2, #0
 80022c4:	da01      	bge.n	80022ca <_has_ext_stdout_stderr+0xe>
 80022c6:	f7ff ffdf 	bl	8002288 <initialise_semihosting_exts>
 80022ca:	6820      	ldr	r0, [r4, #0]
 80022cc:	bd10      	pop	{r4, pc}
 80022ce:	bf00      	nop
 80022d0:	2000007c 	.word	0x2000007c

080022d4 <initialise_monitor_handles>:
 80022d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022d8:	b085      	sub	sp, #20
 80022da:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800238c <initialise_monitor_handles+0xb8>
 80022de:	f8cd 9004 	str.w	r9, [sp, #4]
 80022e2:	2303      	movs	r3, #3
 80022e4:	2400      	movs	r4, #0
 80022e6:	9303      	str	r3, [sp, #12]
 80022e8:	f10d 0804 	add.w	r8, sp, #4
 80022ec:	9402      	str	r4, [sp, #8]
 80022ee:	2501      	movs	r5, #1
 80022f0:	4628      	mov	r0, r5
 80022f2:	4641      	mov	r1, r8
 80022f4:	beab      	bkpt	0x00ab
 80022f6:	4605      	mov	r5, r0
 80022f8:	4e20      	ldr	r6, [pc, #128]	; (800237c <initialise_monitor_handles+0xa8>)
 80022fa:	4a21      	ldr	r2, [pc, #132]	; (8002380 <initialise_monitor_handles+0xac>)
 80022fc:	6035      	str	r5, [r6, #0]
 80022fe:	4623      	mov	r3, r4
 8002300:	f04f 31ff 	mov.w	r1, #4294967295
 8002304:	4614      	mov	r4, r2
 8002306:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 800230a:	3301      	adds	r3, #1
 800230c:	2b14      	cmp	r3, #20
 800230e:	d1fa      	bne.n	8002306 <initialise_monitor_handles+0x32>
 8002310:	f7ff ffd4 	bl	80022bc <_has_ext_stdout_stderr>
 8002314:	4d1b      	ldr	r5, [pc, #108]	; (8002384 <initialise_monitor_handles+0xb0>)
 8002316:	b1d0      	cbz	r0, 800234e <initialise_monitor_handles+0x7a>
 8002318:	f04f 0a03 	mov.w	sl, #3
 800231c:	2304      	movs	r3, #4
 800231e:	f8cd 9004 	str.w	r9, [sp, #4]
 8002322:	2701      	movs	r7, #1
 8002324:	f8cd a00c 	str.w	sl, [sp, #12]
 8002328:	9302      	str	r3, [sp, #8]
 800232a:	4638      	mov	r0, r7
 800232c:	4641      	mov	r1, r8
 800232e:	beab      	bkpt	0x00ab
 8002330:	4683      	mov	fp, r0
 8002332:	4b15      	ldr	r3, [pc, #84]	; (8002388 <initialise_monitor_handles+0xb4>)
 8002334:	f8cd 9004 	str.w	r9, [sp, #4]
 8002338:	f8c3 b000 	str.w	fp, [r3]
 800233c:	2308      	movs	r3, #8
 800233e:	f8cd a00c 	str.w	sl, [sp, #12]
 8002342:	9302      	str	r3, [sp, #8]
 8002344:	4638      	mov	r0, r7
 8002346:	4641      	mov	r1, r8
 8002348:	beab      	bkpt	0x00ab
 800234a:	4607      	mov	r7, r0
 800234c:	602f      	str	r7, [r5, #0]
 800234e:	682b      	ldr	r3, [r5, #0]
 8002350:	3301      	adds	r3, #1
 8002352:	bf02      	ittt	eq
 8002354:	4b0c      	ldreq	r3, [pc, #48]	; (8002388 <initialise_monitor_handles+0xb4>)
 8002356:	681b      	ldreq	r3, [r3, #0]
 8002358:	602b      	streq	r3, [r5, #0]
 800235a:	6833      	ldr	r3, [r6, #0]
 800235c:	6023      	str	r3, [r4, #0]
 800235e:	2600      	movs	r6, #0
 8002360:	6066      	str	r6, [r4, #4]
 8002362:	f7ff ffab 	bl	80022bc <_has_ext_stdout_stderr>
 8002366:	b130      	cbz	r0, 8002376 <initialise_monitor_handles+0xa2>
 8002368:	4b07      	ldr	r3, [pc, #28]	; (8002388 <initialise_monitor_handles+0xb4>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8002370:	682b      	ldr	r3, [r5, #0]
 8002372:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8002376:	b005      	add	sp, #20
 8002378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800237c:	200000ac 	.word	0x200000ac
 8002380:	200000b4 	.word	0x200000b4
 8002384:	200000a8 	.word	0x200000a8
 8002388:	200000b0 	.word	0x200000b0
 800238c:	080024b1 	.word	0x080024b1

08002390 <_isatty>:
 8002390:	b570      	push	{r4, r5, r6, lr}
 8002392:	f7ff fd71 	bl	8001e78 <findslot>
 8002396:	2509      	movs	r5, #9
 8002398:	4604      	mov	r4, r0
 800239a:	b920      	cbnz	r0, 80023a6 <_isatty+0x16>
 800239c:	f7fe fdf2 	bl	8000f84 <__errno>
 80023a0:	6005      	str	r5, [r0, #0]
 80023a2:	4620      	mov	r0, r4
 80023a4:	bd70      	pop	{r4, r5, r6, pc}
 80023a6:	4628      	mov	r0, r5
 80023a8:	4621      	mov	r1, r4
 80023aa:	beab      	bkpt	0x00ab
 80023ac:	4604      	mov	r4, r0
 80023ae:	2c01      	cmp	r4, #1
 80023b0:	d0f7      	beq.n	80023a2 <_isatty+0x12>
 80023b2:	f7fe fde7 	bl	8000f84 <__errno>
 80023b6:	2400      	movs	r4, #0
 80023b8:	4606      	mov	r6, r0
 80023ba:	2513      	movs	r5, #19
 80023bc:	4628      	mov	r0, r5
 80023be:	4621      	mov	r1, r4
 80023c0:	beab      	bkpt	0x00ab
 80023c2:	4605      	mov	r5, r0
 80023c4:	6035      	str	r5, [r6, #0]
 80023c6:	e7ec      	b.n	80023a2 <_isatty+0x12>

080023c8 <_init>:
 80023c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ca:	bf00      	nop
 80023cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ce:	bc08      	pop	{r3}
 80023d0:	469e      	mov	lr, r3
 80023d2:	4770      	bx	lr

080023d4 <_fini>:
 80023d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023d6:	bf00      	nop
 80023d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023da:	bc08      	pop	{r3}
 80023dc:	469e      	mov	lr, r3
 80023de:	4770      	bx	lr
