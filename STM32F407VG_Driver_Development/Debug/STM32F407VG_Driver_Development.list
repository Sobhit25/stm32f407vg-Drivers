
STM32F407VG_Driver_Development.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000820  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  080009c8  080009c8  000109c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080009d4  080009d4  000109dc  2**0
                  CONTENTS
  4 .ARM          00000000  080009d4  080009d4  000109dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080009d4  080009dc  000109dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009d4  080009d4  000109d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080009d8  080009d8  000109d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000109dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080009dc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080009dc  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000109dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001b10  00000000  00000000  00010a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000048a  00000000  00000000  0001251c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000138  00000000  00000000  000129a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000100  00000000  00000000  00012ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000020d7  00000000  00000000  00012be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000185f  00000000  00000000  00014cb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009015  00000000  00000000  00016516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0001f52b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000428  00000000  00000000  0001f580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080009b0 	.word	0x080009b0

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	080009b0 	.word	0x080009b0

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <GPIO_Init>:
 *
 * @return            -  none
 *
 * @Note              -  none
 *********************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80001f8:	b480      	push	{r7}
 80001fa:	b085      	sub	sp, #20
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]

	//RCC Clock Enable for respective GPIO Port
	if(pGPIOHandle->pGPIOx == GPIOA)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a6e      	ldr	r2, [pc, #440]	; (80003c0 <GPIO_Init+0x1c8>)
 8000206:	4293      	cmp	r3, r2
 8000208:	d106      	bne.n	8000218 <GPIO_Init+0x20>
		GPIOA_PClk_EN();
 800020a:	4b6e      	ldr	r3, [pc, #440]	; (80003c4 <GPIO_Init+0x1cc>)
 800020c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800020e:	4a6d      	ldr	r2, [pc, #436]	; (80003c4 <GPIO_Init+0x1cc>)
 8000210:	f043 0301 	orr.w	r3, r3, #1
 8000214:	6313      	str	r3, [r2, #48]	; 0x30
 8000216:	e02e      	b.n	8000276 <GPIO_Init+0x7e>
	else if(pGPIOHandle->pGPIOx == GPIOB)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a6a      	ldr	r2, [pc, #424]	; (80003c8 <GPIO_Init+0x1d0>)
 800021e:	4293      	cmp	r3, r2
 8000220:	d106      	bne.n	8000230 <GPIO_Init+0x38>
			GPIOB_PClk_EN();
 8000222:	4b68      	ldr	r3, [pc, #416]	; (80003c4 <GPIO_Init+0x1cc>)
 8000224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000226:	4a67      	ldr	r2, [pc, #412]	; (80003c4 <GPIO_Init+0x1cc>)
 8000228:	f043 0302 	orr.w	r3, r3, #2
 800022c:	6313      	str	r3, [r2, #48]	; 0x30
 800022e:	e022      	b.n	8000276 <GPIO_Init+0x7e>
	else if(pGPIOHandle->pGPIOx == GPIOC)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a65      	ldr	r2, [pc, #404]	; (80003cc <GPIO_Init+0x1d4>)
 8000236:	4293      	cmp	r3, r2
 8000238:	d106      	bne.n	8000248 <GPIO_Init+0x50>
			GPIOC_PClk_EN();
 800023a:	4b62      	ldr	r3, [pc, #392]	; (80003c4 <GPIO_Init+0x1cc>)
 800023c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800023e:	4a61      	ldr	r2, [pc, #388]	; (80003c4 <GPIO_Init+0x1cc>)
 8000240:	f043 0304 	orr.w	r3, r3, #4
 8000244:	6313      	str	r3, [r2, #48]	; 0x30
 8000246:	e016      	b.n	8000276 <GPIO_Init+0x7e>
	else if(pGPIOHandle->pGPIOx == GPIOD)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a60      	ldr	r2, [pc, #384]	; (80003d0 <GPIO_Init+0x1d8>)
 800024e:	4293      	cmp	r3, r2
 8000250:	d106      	bne.n	8000260 <GPIO_Init+0x68>
			GPIOD_PClk_EN();
 8000252:	4b5c      	ldr	r3, [pc, #368]	; (80003c4 <GPIO_Init+0x1cc>)
 8000254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000256:	4a5b      	ldr	r2, [pc, #364]	; (80003c4 <GPIO_Init+0x1cc>)
 8000258:	f043 0308 	orr.w	r3, r3, #8
 800025c:	6313      	str	r3, [r2, #48]	; 0x30
 800025e:	e00a      	b.n	8000276 <GPIO_Init+0x7e>
	else if(pGPIOHandle->pGPIOx == GPIOE)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a5b      	ldr	r2, [pc, #364]	; (80003d4 <GPIO_Init+0x1dc>)
 8000266:	4293      	cmp	r3, r2
 8000268:	d105      	bne.n	8000276 <GPIO_Init+0x7e>
			GPIOE_PClk_EN();
 800026a:	4b56      	ldr	r3, [pc, #344]	; (80003c4 <GPIO_Init+0x1cc>)
 800026c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800026e:	4a55      	ldr	r2, [pc, #340]	; (80003c4 <GPIO_Init+0x1cc>)
 8000270:	f043 0310 	orr.w	r3, r3, #16
 8000274:	6313      	str	r3, [r2, #48]	; 0x30

	uint32_t temp = 0;
 8000276:	2300      	movs	r3, #0
 8000278:	60fb      	str	r3, [r7, #12]


	// Configure Pin GPIO_PinNumber
	uint8_t Pin = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	791b      	ldrb	r3, [r3, #4]
 800027e:	72fb      	strb	r3, [r7, #11]

	// Configure Pin Mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= 0x03){
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	795b      	ldrb	r3, [r3, #5]
 8000284:	2b03      	cmp	r3, #3
 8000286:	d81e      	bhi.n	80002c6 <GPIO_Init+0xce>
		temp = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinMode) << (2*Pin));
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	795b      	ldrb	r3, [r3, #5]
 800028c:	461a      	mov	r2, r3
 800028e:	7afb      	ldrb	r3, [r7, #11]
 8000290:	005b      	lsls	r3, r3, #1
 8000292:	fa02 f303 	lsl.w	r3, r2, r3
 8000296:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (2*Pin));
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	681a      	ldr	r2, [r3, #0]
 800029e:	7afb      	ldrb	r3, [r7, #11]
 80002a0:	005b      	lsls	r3, r3, #1
 80002a2:	2103      	movs	r1, #3
 80002a4:	fa01 f303 	lsl.w	r3, r1, r3
 80002a8:	43db      	mvns	r3, r3
 80002aa:	4619      	mov	r1, r3
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	400a      	ands	r2, r1
 80002b2:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	6819      	ldr	r1, [r3, #0]
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	68fa      	ldr	r2, [r7, #12]
 80002c0:	430a      	orrs	r2, r1
 80002c2:	601a      	str	r2, [r3, #0]
 80002c4:	e0ae      	b.n	8000424 <GPIO_Init+0x22c>
	}
	else{
		// Interrupt Mode Settings
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	795b      	ldrb	r3, [r3, #5]
 80002ca:	2b04      	cmp	r3, #4
 80002cc:	d116      	bne.n	80002fc <GPIO_Init+0x104>
			//Configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80002ce:	4b42      	ldr	r3, [pc, #264]	; (80003d8 <GPIO_Init+0x1e0>)
 80002d0:	68db      	ldr	r3, [r3, #12]
 80002d2:	687a      	ldr	r2, [r7, #4]
 80002d4:	7912      	ldrb	r2, [r2, #4]
 80002d6:	4611      	mov	r1, r2
 80002d8:	2201      	movs	r2, #1
 80002da:	408a      	lsls	r2, r1
 80002dc:	4611      	mov	r1, r2
 80002de:	4a3e      	ldr	r2, [pc, #248]	; (80003d8 <GPIO_Init+0x1e0>)
 80002e0:	430b      	orrs	r3, r1
 80002e2:	60d3      	str	r3, [r2, #12]
			//Disable the RTSR
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80002e4:	4b3c      	ldr	r3, [pc, #240]	; (80003d8 <GPIO_Init+0x1e0>)
 80002e6:	689b      	ldr	r3, [r3, #8]
 80002e8:	687a      	ldr	r2, [r7, #4]
 80002ea:	7912      	ldrb	r2, [r2, #4]
 80002ec:	4611      	mov	r1, r2
 80002ee:	2201      	movs	r2, #1
 80002f0:	408a      	lsls	r2, r1
 80002f2:	43d2      	mvns	r2, r2
 80002f4:	4611      	mov	r1, r2
 80002f6:	4a38      	ldr	r2, [pc, #224]	; (80003d8 <GPIO_Init+0x1e0>)
 80002f8:	400b      	ands	r3, r1
 80002fa:	6093      	str	r3, [r2, #8]
		}
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	795b      	ldrb	r3, [r3, #5]
 8000300:	2b05      	cmp	r3, #5
 8000302:	d116      	bne.n	8000332 <GPIO_Init+0x13a>
			//Configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000304:	4b34      	ldr	r3, [pc, #208]	; (80003d8 <GPIO_Init+0x1e0>)
 8000306:	689b      	ldr	r3, [r3, #8]
 8000308:	687a      	ldr	r2, [r7, #4]
 800030a:	7912      	ldrb	r2, [r2, #4]
 800030c:	4611      	mov	r1, r2
 800030e:	2201      	movs	r2, #1
 8000310:	408a      	lsls	r2, r1
 8000312:	4611      	mov	r1, r2
 8000314:	4a30      	ldr	r2, [pc, #192]	; (80003d8 <GPIO_Init+0x1e0>)
 8000316:	430b      	orrs	r3, r1
 8000318:	6093      	str	r3, [r2, #8]
			//Disable the FTSR
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800031a:	4b2f      	ldr	r3, [pc, #188]	; (80003d8 <GPIO_Init+0x1e0>)
 800031c:	68db      	ldr	r3, [r3, #12]
 800031e:	687a      	ldr	r2, [r7, #4]
 8000320:	7912      	ldrb	r2, [r2, #4]
 8000322:	4611      	mov	r1, r2
 8000324:	2201      	movs	r2, #1
 8000326:	408a      	lsls	r2, r1
 8000328:	43d2      	mvns	r2, r2
 800032a:	4611      	mov	r1, r2
 800032c:	4a2a      	ldr	r2, [pc, #168]	; (80003d8 <GPIO_Init+0x1e0>)
 800032e:	400b      	ands	r3, r1
 8000330:	60d3      	str	r3, [r2, #12]
		}
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FTRT){
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	795b      	ldrb	r3, [r3, #5]
 8000336:	2b06      	cmp	r3, #6
 8000338:	d115      	bne.n	8000366 <GPIO_Init+0x16e>
			//Configure the FTSR & RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800033a:	4b27      	ldr	r3, [pc, #156]	; (80003d8 <GPIO_Init+0x1e0>)
 800033c:	689b      	ldr	r3, [r3, #8]
 800033e:	687a      	ldr	r2, [r7, #4]
 8000340:	7912      	ldrb	r2, [r2, #4]
 8000342:	4611      	mov	r1, r2
 8000344:	2201      	movs	r2, #1
 8000346:	408a      	lsls	r2, r1
 8000348:	4611      	mov	r1, r2
 800034a:	4a23      	ldr	r2, [pc, #140]	; (80003d8 <GPIO_Init+0x1e0>)
 800034c:	430b      	orrs	r3, r1
 800034e:	6093      	str	r3, [r2, #8]

			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000350:	4b21      	ldr	r3, [pc, #132]	; (80003d8 <GPIO_Init+0x1e0>)
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	687a      	ldr	r2, [r7, #4]
 8000356:	7912      	ldrb	r2, [r2, #4]
 8000358:	4611      	mov	r1, r2
 800035a:	2201      	movs	r2, #1
 800035c:	408a      	lsls	r2, r1
 800035e:	4611      	mov	r1, r2
 8000360:	4a1d      	ldr	r2, [pc, #116]	; (80003d8 <GPIO_Init+0x1e0>)
 8000362:	430b      	orrs	r3, r1
 8000364:	60d3      	str	r3, [r2, #12]
		}


		//2. Configure the GPIO Port Selection in SYSCFG_EXTIR
		uint8_t extiLine = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	791b      	ldrb	r3, [r3, #4]
 800036a:	089b      	lsrs	r3, r3, #2
 800036c:	72bb      	strb	r3, [r7, #10]
		uint8_t extiPos  = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	791b      	ldrb	r3, [r3, #4]
 8000372:	f003 0303 	and.w	r3, r3, #3
 8000376:	727b      	strb	r3, [r7, #9]

		uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a10      	ldr	r2, [pc, #64]	; (80003c0 <GPIO_Init+0x1c8>)
 800037e:	4293      	cmp	r3, r2
 8000380:	d02c      	beq.n	80003dc <GPIO_Init+0x1e4>
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a10      	ldr	r2, [pc, #64]	; (80003c8 <GPIO_Init+0x1d0>)
 8000388:	4293      	cmp	r3, r2
 800038a:	d016      	beq.n	80003ba <GPIO_Init+0x1c2>
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a0e      	ldr	r2, [pc, #56]	; (80003cc <GPIO_Init+0x1d4>)
 8000392:	4293      	cmp	r3, r2
 8000394:	d00f      	beq.n	80003b6 <GPIO_Init+0x1be>
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	4a0d      	ldr	r2, [pc, #52]	; (80003d0 <GPIO_Init+0x1d8>)
 800039c:	4293      	cmp	r3, r2
 800039e:	d008      	beq.n	80003b2 <GPIO_Init+0x1ba>
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a0b      	ldr	r2, [pc, #44]	; (80003d4 <GPIO_Init+0x1dc>)
 80003a6:	4293      	cmp	r3, r2
 80003a8:	d101      	bne.n	80003ae <GPIO_Init+0x1b6>
 80003aa:	2304      	movs	r3, #4
 80003ac:	e017      	b.n	80003de <GPIO_Init+0x1e6>
 80003ae:	2300      	movs	r3, #0
 80003b0:	e015      	b.n	80003de <GPIO_Init+0x1e6>
 80003b2:	2303      	movs	r3, #3
 80003b4:	e013      	b.n	80003de <GPIO_Init+0x1e6>
 80003b6:	2302      	movs	r3, #2
 80003b8:	e011      	b.n	80003de <GPIO_Init+0x1e6>
 80003ba:	2301      	movs	r3, #1
 80003bc:	e00f      	b.n	80003de <GPIO_Init+0x1e6>
 80003be:	bf00      	nop
 80003c0:	40020000 	.word	0x40020000
 80003c4:	40023800 	.word	0x40023800
 80003c8:	40020400 	.word	0x40020400
 80003cc:	40020800 	.word	0x40020800
 80003d0:	40020c00 	.word	0x40020c00
 80003d4:	40021000 	.word	0x40021000
 80003d8:	40013c00 	.word	0x40013c00
 80003dc:	2300      	movs	r3, #0
 80003de:	723b      	strb	r3, [r7, #8]

		SYSCGF_PClk_EN();
 80003e0:	4b63      	ldr	r3, [pc, #396]	; (8000570 <GPIO_Init+0x378>)
 80003e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003e4:	4a62      	ldr	r2, [pc, #392]	; (8000570 <GPIO_Init+0x378>)
 80003e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ea:	6453      	str	r3, [r2, #68]	; 0x44

		SYSCFG->EXTICR[extiLine] |= (portCode << extiPos*4);
 80003ec:	4a61      	ldr	r2, [pc, #388]	; (8000574 <GPIO_Init+0x37c>)
 80003ee:	7abb      	ldrb	r3, [r7, #10]
 80003f0:	3302      	adds	r3, #2
 80003f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003f6:	7a39      	ldrb	r1, [r7, #8]
 80003f8:	7a7b      	ldrb	r3, [r7, #9]
 80003fa:	009b      	lsls	r3, r3, #2
 80003fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000400:	4618      	mov	r0, r3
 8000402:	495c      	ldr	r1, [pc, #368]	; (8000574 <GPIO_Init+0x37c>)
 8000404:	7abb      	ldrb	r3, [r7, #10]
 8000406:	4302      	orrs	r2, r0
 8000408:	3302      	adds	r3, #2
 800040a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


		//3. Enable the interrupt delivery from peripheral side using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800040e:	4b5a      	ldr	r3, [pc, #360]	; (8000578 <GPIO_Init+0x380>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	687a      	ldr	r2, [r7, #4]
 8000414:	7912      	ldrb	r2, [r2, #4]
 8000416:	4611      	mov	r1, r2
 8000418:	2201      	movs	r2, #1
 800041a:	408a      	lsls	r2, r1
 800041c:	4611      	mov	r1, r2
 800041e:	4a56      	ldr	r2, [pc, #344]	; (8000578 <GPIO_Init+0x380>)
 8000420:	430b      	orrs	r3, r1
 8000422:	6013      	str	r3, [r2, #0]
	}


	// Configure Pin OPType
	temp = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType) << Pin);
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	7a1b      	ldrb	r3, [r3, #8]
 8000428:	461a      	mov	r2, r3
 800042a:	7afb      	ldrb	r3, [r7, #11]
 800042c:	fa02 f303 	lsl.w	r3, r2, r3
 8000430:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x03 << Pin);
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	685a      	ldr	r2, [r3, #4]
 8000438:	7afb      	ldrb	r3, [r7, #11]
 800043a:	2103      	movs	r1, #3
 800043c:	fa01 f303 	lsl.w	r3, r1, r3
 8000440:	43db      	mvns	r3, r3
 8000442:	4619      	mov	r1, r3
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	400a      	ands	r2, r1
 800044a:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	6859      	ldr	r1, [r3, #4]
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	68fa      	ldr	r2, [r7, #12]
 8000458:	430a      	orrs	r2, r1
 800045a:	605a      	str	r2, [r3, #4]


	// Configure Pin PinSpeed
	temp = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed) << (2*Pin));
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	799b      	ldrb	r3, [r3, #6]
 8000460:	461a      	mov	r2, r3
 8000462:	7afb      	ldrb	r3, [r7, #11]
 8000464:	005b      	lsls	r3, r3, #1
 8000466:	fa02 f303 	lsl.w	r3, r2, r3
 800046a:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << (2*Pin));
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	689a      	ldr	r2, [r3, #8]
 8000472:	7afb      	ldrb	r3, [r7, #11]
 8000474:	005b      	lsls	r3, r3, #1
 8000476:	2103      	movs	r1, #3
 8000478:	fa01 f303 	lsl.w	r3, r1, r3
 800047c:	43db      	mvns	r3, r3
 800047e:	4619      	mov	r1, r3
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	400a      	ands	r2, r1
 8000486:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	6899      	ldr	r1, [r3, #8]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	68fa      	ldr	r2, [r7, #12]
 8000494:	430a      	orrs	r2, r1
 8000496:	609a      	str	r2, [r3, #8]


	// Configure Pin PinPuPdCtrl
	temp = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdCtrl) << (2*Pin));
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	79db      	ldrb	r3, [r3, #7]
 800049c:	461a      	mov	r2, r3
 800049e:	7afb      	ldrb	r3, [r7, #11]
 80004a0:	005b      	lsls	r3, r3, #1
 80004a2:	fa02 f303 	lsl.w	r3, r2, r3
 80004a6:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << (2*Pin));
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	68da      	ldr	r2, [r3, #12]
 80004ae:	7afb      	ldrb	r3, [r7, #11]
 80004b0:	005b      	lsls	r3, r3, #1
 80004b2:	2103      	movs	r1, #3
 80004b4:	fa01 f303 	lsl.w	r3, r1, r3
 80004b8:	43db      	mvns	r3, r3
 80004ba:	4619      	mov	r1, r3
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	400a      	ands	r2, r1
 80004c2:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	68d9      	ldr	r1, [r3, #12]
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	68fa      	ldr	r2, [r7, #12]
 80004d0:	430a      	orrs	r2, r1
 80004d2:	60da      	str	r2, [r3, #12]



	// Configure Pin AltFunc
	if(Pin%8 == 0){
 80004d4:	7afb      	ldrb	r3, [r7, #11]
 80004d6:	f003 0307 	and.w	r3, r3, #7
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d11e      	bne.n	800051e <GPIO_Init+0x326>
		temp = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunc) << (4*Pin));
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	7a5b      	ldrb	r3, [r3, #9]
 80004e4:	461a      	mov	r2, r3
 80004e6:	7afb      	ldrb	r3, [r7, #11]
 80004e8:	009b      	lsls	r3, r3, #2
 80004ea:	fa02 f303 	lsl.w	r3, r2, r3
 80004ee:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->AFRL &= ~(0x0F << (4*Pin));
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	6a1a      	ldr	r2, [r3, #32]
 80004f6:	7afb      	ldrb	r3, [r7, #11]
 80004f8:	009b      	lsls	r3, r3, #2
 80004fa:	210f      	movs	r1, #15
 80004fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000500:	43db      	mvns	r3, r3
 8000502:	4619      	mov	r1, r3
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	400a      	ands	r2, r1
 800050a:	621a      	str	r2, [r3, #32]
		pGPIOHandle->pGPIOx->AFRL |= temp;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	6a19      	ldr	r1, [r3, #32]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	68fa      	ldr	r2, [r7, #12]
 8000518:	430a      	orrs	r2, r1
 800051a:	621a      	str	r2, [r3, #32]
		pGPIOHandle->pGPIOx->AFRH &= ~(0x0F << (4*(Pin%8)));
		pGPIOHandle->pGPIOx->AFRH |= temp;
	}


}
 800051c:	e021      	b.n	8000562 <GPIO_Init+0x36a>
		temp = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunc) << (4*(Pin%8)));
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	7a5b      	ldrb	r3, [r3, #9]
 8000522:	461a      	mov	r2, r3
 8000524:	7afb      	ldrb	r3, [r7, #11]
 8000526:	f003 0307 	and.w	r3, r3, #7
 800052a:	009b      	lsls	r3, r3, #2
 800052c:	fa02 f303 	lsl.w	r3, r2, r3
 8000530:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->AFRH &= ~(0x0F << (4*(Pin%8)));
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000538:	7afb      	ldrb	r3, [r7, #11]
 800053a:	f003 0307 	and.w	r3, r3, #7
 800053e:	009b      	lsls	r3, r3, #2
 8000540:	210f      	movs	r1, #15
 8000542:	fa01 f303 	lsl.w	r3, r1, r3
 8000546:	43db      	mvns	r3, r3
 8000548:	4619      	mov	r1, r3
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	400a      	ands	r2, r1
 8000550:	625a      	str	r2, [r3, #36]	; 0x24
		pGPIOHandle->pGPIOx->AFRH |= temp;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	68fa      	ldr	r2, [r7, #12]
 800055e:	430a      	orrs	r2, r1
 8000560:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000562:	bf00      	nop
 8000564:	3714      	adds	r7, #20
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	40023800 	.word	0x40023800
 8000574:	40013800 	.word	0x40013800
 8000578:	40013c00 	.word	0x40013c00

0800057c <SPI_PeriClockControl>:


/*
 * SPI Peripheral clock control function
 */
void SPI_PeriClockControl(SPI_RegDef_t* pSPIx, uint8_t EnorDi){
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	460b      	mov	r3, r1
 8000586:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000588:	78fb      	ldrb	r3, [r7, #3]
 800058a:	2b01      	cmp	r3, #1
 800058c:	d120      	bne.n	80005d0 <SPI_PeriClockControl+0x54>
		if(pSPIx == SPI1)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	4a22      	ldr	r2, [pc, #136]	; (800061c <SPI_PeriClockControl+0xa0>)
 8000592:	4293      	cmp	r3, r2
 8000594:	d106      	bne.n	80005a4 <SPI_PeriClockControl+0x28>
			SPI1_PClk_EN();
 8000596:	4b22      	ldr	r3, [pc, #136]	; (8000620 <SPI_PeriClockControl+0xa4>)
 8000598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800059a:	4a21      	ldr	r2, [pc, #132]	; (8000620 <SPI_PeriClockControl+0xa4>)
 800059c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005a0:	6453      	str	r3, [r2, #68]	; 0x44
		else if(pSPIx == SPI2)
			SPI2_PClk_DI();
		else if(pSPIx == SPI3)
			SPI3_PClk_DI();
	}
}
 80005a2:	e035      	b.n	8000610 <SPI_PeriClockControl+0x94>
		else if(pSPIx == SPI2)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	4a1f      	ldr	r2, [pc, #124]	; (8000624 <SPI_PeriClockControl+0xa8>)
 80005a8:	4293      	cmp	r3, r2
 80005aa:	d106      	bne.n	80005ba <SPI_PeriClockControl+0x3e>
			SPI2_PClk_EN();
 80005ac:	4b1c      	ldr	r3, [pc, #112]	; (8000620 <SPI_PeriClockControl+0xa4>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	4a1b      	ldr	r2, [pc, #108]	; (8000620 <SPI_PeriClockControl+0xa4>)
 80005b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80005b8:	e02a      	b.n	8000610 <SPI_PeriClockControl+0x94>
		else if(pSPIx == SPI3)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4a1a      	ldr	r2, [pc, #104]	; (8000628 <SPI_PeriClockControl+0xac>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d126      	bne.n	8000610 <SPI_PeriClockControl+0x94>
			SPI3_PClk_EN();
 80005c2:	4b17      	ldr	r3, [pc, #92]	; (8000620 <SPI_PeriClockControl+0xa4>)
 80005c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c6:	4a16      	ldr	r2, [pc, #88]	; (8000620 <SPI_PeriClockControl+0xa4>)
 80005c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005cc:	6413      	str	r3, [r2, #64]	; 0x40
}
 80005ce:	e01f      	b.n	8000610 <SPI_PeriClockControl+0x94>
		if(pSPIx == SPI1)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	4a12      	ldr	r2, [pc, #72]	; (800061c <SPI_PeriClockControl+0xa0>)
 80005d4:	4293      	cmp	r3, r2
 80005d6:	d106      	bne.n	80005e6 <SPI_PeriClockControl+0x6a>
			SPI1_PClk_DI();
 80005d8:	4b11      	ldr	r3, [pc, #68]	; (8000620 <SPI_PeriClockControl+0xa4>)
 80005da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005dc:	4a10      	ldr	r2, [pc, #64]	; (8000620 <SPI_PeriClockControl+0xa4>)
 80005de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80005e2:	6453      	str	r3, [r2, #68]	; 0x44
}
 80005e4:	e014      	b.n	8000610 <SPI_PeriClockControl+0x94>
		else if(pSPIx == SPI2)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4a0e      	ldr	r2, [pc, #56]	; (8000624 <SPI_PeriClockControl+0xa8>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d106      	bne.n	80005fc <SPI_PeriClockControl+0x80>
			SPI2_PClk_DI();
 80005ee:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <SPI_PeriClockControl+0xa4>)
 80005f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f2:	4a0b      	ldr	r2, [pc, #44]	; (8000620 <SPI_PeriClockControl+0xa4>)
 80005f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80005f8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80005fa:	e009      	b.n	8000610 <SPI_PeriClockControl+0x94>
		else if(pSPIx == SPI3)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4a0a      	ldr	r2, [pc, #40]	; (8000628 <SPI_PeriClockControl+0xac>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d105      	bne.n	8000610 <SPI_PeriClockControl+0x94>
			SPI3_PClk_DI();
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <SPI_PeriClockControl+0xa4>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000608:	4a05      	ldr	r2, [pc, #20]	; (8000620 <SPI_PeriClockControl+0xa4>)
 800060a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800060e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000610:	bf00      	nop
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	40013000 	.word	0x40013000
 8000620:	40023800 	.word	0x40023800
 8000624:	40003800 	.word	0x40003800
 8000628:	40003c00 	.word	0x40003c00

0800062c <SPI_Init>:


/*
 * SPI Init De-Init functions
 */
void SPI_Init(SPI_Handle_t* pSPIHandle){
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]

	//Enable Peripheral Clock
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2101      	movs	r1, #1
 800063a:	4618      	mov	r0, r3
 800063c:	f7ff ff9e 	bl	800057c <SPI_PeriClockControl>

	//1. Set Device Mode
	if(pSPIHandle->SPI_Config.Device_Mode == SPI_DEVICE_MODE_MASTER)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	791b      	ldrb	r3, [r3, #4]
 8000644:	2b01      	cmp	r3, #1
 8000646:	d108      	bne.n	800065a <SPI_Init+0x2e>
		pSPIHandle->pSPIx->CR1 |= (1 << SPI_CR1_MSTR);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	f042 0204 	orr.w	r2, r2, #4
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	e007      	b.n	800066a <SPI_Init+0x3e>
	else
		pSPIHandle->pSPIx->CR1 &= ~(1 << SPI_CR1_MSTR);
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f022 0204 	bic.w	r2, r2, #4
 8000668:	601a      	str	r2, [r3, #0]

	//2. Set Bus Configuration
	if(pSPIHandle->SPI_Config.Bus_Config == SPI_BusConfig_FD){
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	795b      	ldrb	r3, [r3, #5]
 800066e:	2b01      	cmp	r3, #1
 8000670:	d108      	bne.n	8000684 <SPI_Init+0x58>
		pSPIHandle->pSPIx->CR1 &= ~(1 << SPI_CR1_BIDIMODE);
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	681a      	ldr	r2, [r3, #0]
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	e020      	b.n	80006c6 <SPI_Init+0x9a>
	}
	else if(pSPIHandle->SPI_Config.Bus_Config == SPI_BusConfig_HD){
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	795b      	ldrb	r3, [r3, #5]
 8000688:	2b02      	cmp	r3, #2
 800068a:	d108      	bne.n	800069e <SPI_Init+0x72>
		pSPIHandle->pSPIx->CR1 |= (1 << SPI_CR1_BIDIMODE);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	681a      	ldr	r2, [r3, #0]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	e013      	b.n	80006c6 <SPI_Init+0x9a>
	}
	else if(pSPIHandle->SPI_Config.Bus_Config == SPI_BusConfig_SIMPLEX_RXONLY){
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	795b      	ldrb	r3, [r3, #5]
 80006a2:	2b03      	cmp	r3, #3
 80006a4:	d10f      	bne.n	80006c6 <SPI_Init+0x9a>
		pSPIHandle->pSPIx->CR1 &= ~(1 << SPI_CR1_BIDIMODE);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	681a      	ldr	r2, [r3, #0]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80006b4:	601a      	str	r2, [r3, #0]
		pSPIHandle->pSPIx->CR1 |= (1 << SPI_CR1_RXONLY);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	681a      	ldr	r2, [r3, #0]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80006c4:	601a      	str	r2, [r3, #0]
	}

	//3. Set the DFF bit for either 16 or 8 bit data
	if(pSPIHandle->SPI_Config.DFF == SPI_DFF_16BITS){
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	799b      	ldrb	r3, [r3, #6]
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d108      	bne.n	80006e0 <SPI_Init+0xb4>
		pSPIHandle->pSPIx->CR1 |= (1 << SPI_CR1_DFF);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	e007      	b.n	80006f0 <SPI_Init+0xc4>
	}
	else{
		pSPIHandle->pSPIx->CR1 &= ~(1 << SPI_CR1_DFF);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80006ee:	601a      	str	r2, [r3, #0]
	}

	//4. CPHA & CPOL
	if(pSPIHandle->SPI_Config.CPHA == SPI_CPHA_LOW)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	79db      	ldrb	r3, [r3, #7]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d108      	bne.n	800070a <SPI_Init+0xde>
		pSPIHandle->pSPIx->CR1 &= ~(1 << SPI_CR1_CPHA);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	f022 0201 	bic.w	r2, r2, #1
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	e00b      	b.n	8000722 <SPI_Init+0xf6>
	else if(pSPIHandle->SPI_Config.CPHA == SPI_CPHA_HIGH)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	79db      	ldrb	r3, [r3, #7]
 800070e:	2b01      	cmp	r3, #1
 8000710:	d107      	bne.n	8000722 <SPI_Init+0xf6>
		pSPIHandle->pSPIx->CR1 |= (1 << SPI_CR1_CPHA);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f042 0201 	orr.w	r2, r2, #1
 8000720:	601a      	str	r2, [r3, #0]

	if(pSPIHandle->SPI_Config.CPOL == SPI_CPOL_LOW)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	7a1b      	ldrb	r3, [r3, #8]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d108      	bne.n	800073c <SPI_Init+0x110>
		pSPIHandle->pSPIx->CR1 &= ~(1 << SPI_CR1_CPOL);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f022 0202 	bic.w	r2, r2, #2
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	e00b      	b.n	8000754 <SPI_Init+0x128>
	else if(pSPIHandle->SPI_Config.CPOL == SPI_CPOL_HIGH)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	7a1b      	ldrb	r3, [r3, #8]
 8000740:	2b01      	cmp	r3, #1
 8000742:	d107      	bne.n	8000754 <SPI_Init+0x128>
		pSPIHandle->pSPIx->CR1 |= (1 << SPI_CR1_CPOL);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f042 0202 	orr.w	r2, r2, #2
 8000752:	601a      	str	r2, [r3, #0]

	//5. Configure SPI Baud Rate or SPEED
	uint8_t temp = pSPIHandle->SPI_Config.SPEED;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	7a9b      	ldrb	r3, [r3, #10]
 8000758:	73fb      	strb	r3, [r7, #15]
	pSPIHandle->pSPIx->CR1 &= ~(15 << SPI_CR1_BR);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f022 0278 	bic.w	r2, r2, #120	; 0x78
 8000768:	601a      	str	r2, [r3, #0]
	pSPIHandle->pSPIx->CR1 |= (temp << SPI_CR1_CPOL);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	7bfb      	ldrb	r3, [r7, #15]
 8000772:	005b      	lsls	r3, r3, #1
 8000774:	4619      	mov	r1, r3
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	430a      	orrs	r2, r1
 800077c:	601a      	str	r2, [r3, #0]

}
 800077e:	bf00      	nop
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <SPI_SendData>:


/*
 * SPI Send & Receive Data functions
 */
void SPI_SendData(SPI_RegDef_t* pSPIx, uint8_t* pTxBuffer, uint32_t len){
 8000786:	b480      	push	{r7}
 8000788:	b085      	sub	sp, #20
 800078a:	af00      	add	r7, sp, #0
 800078c:	60f8      	str	r0, [r7, #12]
 800078e:	60b9      	str	r1, [r7, #8]
 8000790:	607a      	str	r2, [r7, #4]


	while(len>0){
 8000792:	e023      	b.n	80007dc <SPI_SendData+0x56>
		//Wait for TXE Flag
		while(!(pSPIx->SR & (1 << SPI_SR_TXE)));
 8000794:	bf00      	nop
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	689b      	ldr	r3, [r3, #8]
 800079a:	f003 0302 	and.w	r3, r3, #2
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d0f9      	beq.n	8000796 <SPI_SendData+0x10>

		//Check for Frame format and then write data to DR reg
		if(pSPIx->CR1 & (1 << SPI_CR1_DFF)){
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d00b      	beq.n	80007c6 <SPI_SendData+0x40>
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	881b      	ldrh	r3, [r3, #0]
 80007b2:	461a      	mov	r2, r3
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	60da      	str	r2, [r3, #12]
			(uint16_t*)pTxBuffer++;
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	3301      	adds	r3, #1
 80007bc:	60bb      	str	r3, [r7, #8]
			len=len-2;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	3b02      	subs	r3, #2
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	e00a      	b.n	80007dc <SPI_SendData+0x56>
		}else{
			pSPIx->DR = *pTxBuffer;
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	461a      	mov	r2, r3
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	60da      	str	r2, [r3, #12]
			pTxBuffer++;
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	3301      	adds	r3, #1
 80007d4:	60bb      	str	r3, [r7, #8]
			len--;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	3b01      	subs	r3, #1
 80007da:	607b      	str	r3, [r7, #4]
	while(len>0){
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d1d8      	bne.n	8000794 <SPI_SendData+0xe>
		}
	}

}
 80007e2:	bf00      	nop
 80007e4:	bf00      	nop
 80007e6:	3714      	adds	r7, #20
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <delay>:
 */

#include <stm32f407vg.h>
#include <string.h>

void delay(void){
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
	for(int i=0;i<60000;i++){
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	e002      	b.n	8000802 <delay+0x12>
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	3301      	adds	r3, #1
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8000808:	4293      	cmp	r3, r2
 800080a:	ddf7      	ble.n	80007fc <delay+0xc>
	}
}
 800080c:	bf00      	nop
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
	...

0800081c <main>:

int main(){
 800081c:	b580      	push	{r7, lr}
 800081e:	b08e      	sub	sp, #56	; 0x38
 8000820:	af00      	add	r7, sp, #0

	char data[] = "Hello World";
 8000822:	4a39      	ldr	r2, [pc, #228]	; (8000908 <main+0xec>)
 8000824:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000828:	ca07      	ldmia	r2, {r0, r1, r2}
 800082a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	/*
	 * GPIO INIT FOR SPI PERIPH
	 */
	GPIO_Handle_t SPI_Pins;

	SPI_Pins.pGPIOx = GPIOB;
 800082e:	4b37      	ldr	r3, [pc, #220]	; (800090c <main+0xf0>)
 8000830:	623b      	str	r3, [r7, #32]

	SPI_Pins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000832:	2302      	movs	r3, #2
 8000834:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	SPI_Pins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OPTYPE_PP;
 8000838:	2300      	movs	r3, #0
 800083a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	SPI_Pins.GPIO_PinConfig.GPIO_PinPuPdCtrl = GPIO_PUPD_NOPUPD;
 800083e:	2300      	movs	r3, #0
 8000840:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	SPI_Pins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEED_HIGH;
 8000844:	2302      	movs	r3, #2
 8000846:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	SPI_Pins.GPIO_PinConfig.GPIO_PinAltFunc = GPIO_AF5;
 800084a:	2305      	movs	r3, #5
 800084c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

	//SCLK Pin
	SPI_Pins.GPIO_PinConfig.GPIO_PinNumber = 13;
 8000850:	230d      	movs	r3, #13
 8000852:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_Init(&SPI_Pins);
 8000856:	f107 0320 	add.w	r3, r7, #32
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff fccc 	bl	80001f8 <GPIO_Init>

	//MISO Pin
	SPI_Pins.GPIO_PinConfig.GPIO_PinNumber = 14;
 8000860:	230e      	movs	r3, #14
 8000862:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_Init(&SPI_Pins);
 8000866:	f107 0320 	add.w	r3, r7, #32
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff fcc4 	bl	80001f8 <GPIO_Init>

	//MOSI Pin
	SPI_Pins.GPIO_PinConfig.GPIO_PinNumber = 15;
 8000870:	230f      	movs	r3, #15
 8000872:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_Init(&SPI_Pins);
 8000876:	f107 0320 	add.w	r3, r7, #32
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff fcbc 	bl	80001f8 <GPIO_Init>

	//NSS
	SPI_Pins.GPIO_PinConfig.GPIO_PinNumber = 12;
 8000880:	230c      	movs	r3, #12
 8000882:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_Init(&SPI_Pins);
 8000886:	f107 0320 	add.w	r3, r7, #32
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff fcb4 	bl	80001f8 <GPIO_Init>


	SPI_Handle_t 	SPI2_Handler;

	SPI2_Handler.pSPIx = SPI2;
 8000890:	4b1f      	ldr	r3, [pc, #124]	; (8000910 <main+0xf4>)
 8000892:	603b      	str	r3, [r7, #0]

	SPI2_Handler.SPI_Config.Device_Mode = SPI_DEVICE_MODE_MASTER;
 8000894:	2301      	movs	r3, #1
 8000896:	713b      	strb	r3, [r7, #4]
	SPI2_Handler.SPI_Config.Bus_Config = SPI_BusConfig_FD;
 8000898:	2301      	movs	r3, #1
 800089a:	717b      	strb	r3, [r7, #5]
	SPI2_Handler.SPI_Config.DFF = SPI_DFF_8BITS;
 800089c:	2300      	movs	r3, #0
 800089e:	71bb      	strb	r3, [r7, #6]
	SPI2_Handler.SPI_Config.SPEED = SPI_SCLK_SPEED_DIV2;
 80008a0:	2300      	movs	r3, #0
 80008a2:	72bb      	strb	r3, [r7, #10]
	SPI2_Handler.SPI_Config.CPHA = SPI_CPHA_LOW;
 80008a4:	2300      	movs	r3, #0
 80008a6:	71fb      	strb	r3, [r7, #7]
	SPI2_Handler.SPI_Config.CPOL = SPI_CPOL_LOW;
 80008a8:	2300      	movs	r3, #0
 80008aa:	723b      	strb	r3, [r7, #8]
	SPI2_Handler.SPI_Config.SSM = SPI_SSM_DIS;
 80008ac:	2300      	movs	r3, #0
 80008ae:	727b      	strb	r3, [r7, #9]

	SPI_Init(&SPI2_Handler);
 80008b0:	463b      	mov	r3, r7
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff feba 	bl	800062c <SPI_Init>

	//Single Master Mode
	SPI2_Handler.pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	685a      	ldr	r2, [r3, #4]
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	f042 0204 	orr.w	r2, r2, #4
 80008c2:	605a      	str	r2, [r3, #4]


	while(1){
		//Enabling the SPI Peripheral
		SPI2_Handler.pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80008ce:	601a      	str	r2, [r3, #0]

		SPI_SendData(SPI2, (uint8_t*)data, strlen(data));
 80008d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff fc87 	bl	80001e8 <strlen>
 80008da:	4602      	mov	r2, r0
 80008dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008e0:	4619      	mov	r1, r3
 80008e2:	480b      	ldr	r0, [pc, #44]	; (8000910 <main+0xf4>)
 80008e4:	f7ff ff4f 	bl	8000786 <SPI_SendData>

		if( !(SPI2_Handler.pSPIx->SR & (1 << SPI_SR_BSY)) )
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	689b      	ldr	r3, [r3, #8]
 80008ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d105      	bne.n	8000900 <main+0xe4>
			SPI2_Handler.pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80008fe:	601a      	str	r2, [r3, #0]
		delay();
 8000900:	f7ff ff76 	bl	80007f0 <delay>
		SPI2_Handler.pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000904:	e7de      	b.n	80008c4 <main+0xa8>
 8000906:	bf00      	nop
 8000908:	080009c8 	.word	0x080009c8
 800090c:	40020400 	.word	0x40020400
 8000910:	40003800 	.word	0x40003800

08000914 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000914:	480d      	ldr	r0, [pc, #52]	; (800094c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000916:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000918:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800091c:	480c      	ldr	r0, [pc, #48]	; (8000950 <LoopForever+0x6>)
  ldr r1, =_edata
 800091e:	490d      	ldr	r1, [pc, #52]	; (8000954 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000920:	4a0d      	ldr	r2, [pc, #52]	; (8000958 <LoopForever+0xe>)
  movs r3, #0
 8000922:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000924:	e002      	b.n	800092c <LoopCopyDataInit>

08000926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800092a:	3304      	adds	r3, #4

0800092c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800092c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800092e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000930:	d3f9      	bcc.n	8000926 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000932:	4a0a      	ldr	r2, [pc, #40]	; (800095c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000934:	4c0a      	ldr	r4, [pc, #40]	; (8000960 <LoopForever+0x16>)
  movs r3, #0
 8000936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000938:	e001      	b.n	800093e <LoopFillZerobss>

0800093a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800093a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800093c:	3204      	adds	r2, #4

0800093e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800093e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000940:	d3fb      	bcc.n	800093a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000942:	f000 f811 	bl	8000968 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000946:	f7ff ff69 	bl	800081c <main>

0800094a <LoopForever>:

LoopForever:
    b LoopForever
 800094a:	e7fe      	b.n	800094a <LoopForever>
  ldr   r0, =_estack
 800094c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000954:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000958:	080009dc 	.word	0x080009dc
  ldr r2, =_sbss
 800095c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000960:	2000001c 	.word	0x2000001c

08000964 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000964:	e7fe      	b.n	8000964 <ADC_IRQHandler>
	...

08000968 <__libc_init_array>:
 8000968:	b570      	push	{r4, r5, r6, lr}
 800096a:	4d0d      	ldr	r5, [pc, #52]	; (80009a0 <__libc_init_array+0x38>)
 800096c:	4c0d      	ldr	r4, [pc, #52]	; (80009a4 <__libc_init_array+0x3c>)
 800096e:	1b64      	subs	r4, r4, r5
 8000970:	10a4      	asrs	r4, r4, #2
 8000972:	2600      	movs	r6, #0
 8000974:	42a6      	cmp	r6, r4
 8000976:	d109      	bne.n	800098c <__libc_init_array+0x24>
 8000978:	4d0b      	ldr	r5, [pc, #44]	; (80009a8 <__libc_init_array+0x40>)
 800097a:	4c0c      	ldr	r4, [pc, #48]	; (80009ac <__libc_init_array+0x44>)
 800097c:	f000 f818 	bl	80009b0 <_init>
 8000980:	1b64      	subs	r4, r4, r5
 8000982:	10a4      	asrs	r4, r4, #2
 8000984:	2600      	movs	r6, #0
 8000986:	42a6      	cmp	r6, r4
 8000988:	d105      	bne.n	8000996 <__libc_init_array+0x2e>
 800098a:	bd70      	pop	{r4, r5, r6, pc}
 800098c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000990:	4798      	blx	r3
 8000992:	3601      	adds	r6, #1
 8000994:	e7ee      	b.n	8000974 <__libc_init_array+0xc>
 8000996:	f855 3b04 	ldr.w	r3, [r5], #4
 800099a:	4798      	blx	r3
 800099c:	3601      	adds	r6, #1
 800099e:	e7f2      	b.n	8000986 <__libc_init_array+0x1e>
 80009a0:	080009d4 	.word	0x080009d4
 80009a4:	080009d4 	.word	0x080009d4
 80009a8:	080009d4 	.word	0x080009d4
 80009ac:	080009d8 	.word	0x080009d8

080009b0 <_init>:
 80009b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009b2:	bf00      	nop
 80009b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009b6:	bc08      	pop	{r3}
 80009b8:	469e      	mov	lr, r3
 80009ba:	4770      	bx	lr

080009bc <_fini>:
 80009bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009be:	bf00      	nop
 80009c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009c2:	bc08      	pop	{r3}
 80009c4:	469e      	mov	lr, r3
 80009c6:	4770      	bx	lr
